<?php

declare(strict_types=1);

/*
 * BoltAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace BoltAPILib\Controllers;

use BoltAPILib\Exceptions\ApiException;
use BoltAPILib\ApiHelper;
use BoltAPILib\ConfigurationInterface;
use BoltAPILib\Models;
use BoltAPILib\Http\HttpRequest;
use BoltAPILib\Http\HttpResponse;
use BoltAPILib\Http\HttpMethod;
use BoltAPILib\Http\HttpContext;
use BoltAPILib\Http\HttpCallBack;
use Unirest\Request;

class OrdersController extends BaseController
{
    public function __construct(ConfigurationInterface $config, array $authManagers, ?HttpCallBack $httpCallBack)
    {
        parent::__construct($config, $authManagers, $httpCallBack);
    }

    /**
     * Make a request to this endpoint to create a Bolt order, generate a Bolt order token, and initiate
     * the checkout process. A Bolt order token is required for Bolt orders; see Non-Bolt orders for
     * alternative use cases.
     *
     * @param Models\OrderCreate|null $body Generate Order Token
     *
     * @return Models\OrderView Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createOrderToken(?Models\OrderCreate $body = null): Models\OrderView
    {
        //prepare query string for API call
        $_queryBuilder = '/v1/merchant/orders';

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'X-API-Key' => $this->config->getXAPIKey(),
            'Content-Type'    => 'application/json'
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($body);

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw $this->createExceptionFromJson(
                '\\BoltAPILib\\Exceptions\\IErrorResponseException',
                'Generic Error Schema',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 403) {
            throw $this->createExceptionFromJson(
                '\\BoltAPILib\\Exceptions\\TBDErrorException',
                'Generic Error Schema',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 422) {
            throw $this->createExceptionFromJson(
                '\\BoltAPILib\\Exceptions\\TBDErrorException',
                'Generic Error Schema',
                $_httpRequest,
                $_httpResponse
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'OrderView');
    }

    /**
     * This endpoint creates an Easypost tracker to get shipment status updates.
     *
     * @param Models\TrackingInput|null $body
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function trackShipment(?Models\TrackingInput $body = null): void
    {
        //prepare query string for API call
        $_queryBuilder = '/v1/merchant/track_shipment';

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'X-API-Key' => $this->config->getXAPIKey(),
            'Content-Type'    => 'application/json'
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($body);

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
    }

    /**
     * This endpoint updates an order that has already been placed.
     *
     * @param Models\MerchantOrderUpdate|null $body
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function merchantOrderUpdate(?Models\MerchantOrderUpdate $body = null): void
    {
        //prepare query string for API call
        $_queryBuilder = '/v1/merchant/orders/update';

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'X-API-Key' => $this->config->getXAPIKey(),
            'Content-Type'    => 'application/json'
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($body);

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
    }

    /**
     * This endpoint creates an order that does not use a Bolt order token.
     *
     * @param Models\NonBoltOrder|null $body TBD
     *
     * @return Models\TransactionReferenceView Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createNonBoltOrder(?Models\NonBoltOrder $body = null): Models\TransactionReferenceView
    {
        //prepare query string for API call
        $_queryBuilder = '/v1/non_bolt_order';

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'X-API-Key' => $this->config->getXAPIKey(),
            'Content-Type'    => 'application/json'
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($body);

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'TransactionReferenceView');
    }

    /**
     * TBD
     *
     * @param Models\ShippingAndTax|null $body
     *
     * @return Models\IShippingAndTaxView Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function shippingAndTax(?Models\ShippingAndTax $body = null): Models\IShippingAndTaxView
    {
        //prepare query string for API call
        $_queryBuilder = '/v1/shipping_and_tax';

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'X-API-Key' => $this->config->getXAPIKey(),
            'Content-Type'    => 'application/json'
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($body);

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'IShippingAndTaxView');
    }

    /**
     * This is used for publisher implementation use cases. After the publisher has called Bolt to check
     * product inventory for availability, an order can created through the `/remote_checkout/order`
     * endpoint.
     *
     *
     * @param string $xNonce Unique 12-16 digit for every request
     * @param string $xPublisherKey Unique identifier for the publisher.
     * @param string $xAuthorizationSignature Generated signature after using the signing secret and
     *        nonce by the publisher.
     * @param Models\IRemoteOrderCreate|null $body
     *
     * @return Models\IRemoteOrderResult Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createRemoteOrder(
        string $xNonce,
        string $xPublisherKey,
        string $xAuthorizationSignature,
        ?Models\IRemoteOrderCreate $body = null
    ): Models\IRemoteOrderResult {
        //prepare query string for API call
        $_queryBuilder = '/v1/remote_checkout/order';

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'              => self::$userAgent,
            'Accept'                  => 'application/json',
            'X-API-Key' => $this->config->getXAPIKey(),
            'X-Nonce'                   => $xNonce,
            'X-Publisher-Key'           => $xPublisherKey,
            'X-Authorization-Signature' => $xAuthorizationSignature,
            'Content-Type'              => 'application/json'
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($body);

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 422) {
            throw $this->createExceptionFromJson(
                '\\BoltAPILib\\Exceptions\\V1RemoteCheckoutOrder422ErrorException',
                'Order Creation Failed',
                $_httpRequest,
                $_httpResponse
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'IRemoteOrderResult');
    }
}
