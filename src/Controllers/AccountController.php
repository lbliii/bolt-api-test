<?php

declare(strict_types=1);

/*
 * BoltAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace BoltAPILib\Controllers;

use BoltAPILib\Exceptions\ApiException;
use BoltAPILib\ApiHelper;
use BoltAPILib\ConfigurationInterface;
use BoltAPILib\Models;
use BoltAPILib\Http\HttpRequest;
use BoltAPILib\Http\HttpResponse;
use BoltAPILib\Http\HttpMethod;
use BoltAPILib\Http\HttpContext;
use BoltAPILib\Http\HttpCallBack;
use Unirest\Request;

class AccountController extends BaseController
{
    public function __construct(ConfigurationInterface $config, array $authManagers, ?HttpCallBack $httpCallBack)
    {
        parent::__construct($config, $authManagers, $httpCallBack);
    }

    /**
     * Add an address to a shopper's account address book.
     *
     * @param Models\Address|null $body
     *
     * @return Models\V1AccountAddressesResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function addAddress(?Models\Address $body = null): Models\V1AccountAddressesResponse
    {
        //prepare query string for API call
        $_queryBuilder = '/v1/account/addresses';

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'X-API-Key' => $this->config->getXAPIKey(),
            'Content-Type'    => 'application/json'
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($body);

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'V1AccountAddressesResponse');
    }

    /**
     * Fetch a shopper's account details to pre-fill checkout fields. This request must come from your
     * backend. For PCI compliance, only limited information is returned for each credit card available in
     * the shopper’s wallet.
     *
     * @return Models\AccountDetails Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getAccountDetails(): Models\AccountDetails
    {
        //prepare query string for API call
        $_queryBuilder = '/v1/account';

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'X-API-Key' => $this->config->getXAPIKey()
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'AccountDetails');
    }

    /**
     * Check whether an account exists using `email` as the unique identifier. `Phone` is an optional
     * parameter.
     *
     * @param string $email The bolt user's email address.
     * @param string|null $phone The Bolt user's phone number. Includes country code (e.g. +1); does
     *        not include dashes or spaces.
     *
     * @return Models\V1AccountsView Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function detectAccount(string $email, ?string $phone = null): Models\V1AccountsView
    {
        //prepare query string for API call
        $_queryBuilder = '/v1/account/exists';

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'email' => $email,
            'phone' => $phone,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'X-API-Key' => $this->config->getXAPIKey()
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 422) {
            throw $this->createExceptionFromJson(
                '\\BoltAPILib\\Exceptions\\V1AccountExists422ErrorException',
                'Missing Email Query Parameter',
                $_httpRequest,
                $_httpResponse
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'V1AccountsView');
    }

    /**
     * Add a payment method to a shopper's Bolt account Wallet; this request must come from your backend.
     * You can also tokenize this payment information using our javascript library function.
     *
     * @param Models\EmbeddedCreditCardInput|null $body
     *
     * @return Models\PaymentMethodView Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function addPaymentMethod(?Models\EmbeddedCreditCardInput $body = null): Models\PaymentMethodView
    {
        //prepare query string for API call
        $_queryBuilder = '/v1/account/payment_methods';

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'X-API-Key' => $this->config->getXAPIKey(),
            'Content-Type'    => 'application/json'
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($body);

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'PaymentMethodView');
    }
}
