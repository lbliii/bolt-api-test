<?php

declare(strict_types=1);

/*
 * BoltAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace BoltAPILib\Controllers;

use BoltAPILib\Exceptions\ApiException;
use BoltAPILib\ApiHelper;
use BoltAPILib\ConfigurationInterface;
use BoltAPILib\Models;
use BoltAPILib\Http\HttpRequest;
use BoltAPILib\Http\HttpResponse;
use BoltAPILib\Http\HttpMethod;
use BoltAPILib\Http\HttpContext;
use BoltAPILib\Http\HttpCallBack;
use Unirest\Request;

class TransactionsController extends BaseController
{
    public function __construct(ConfigurationInterface $config, array $authManagers, ?HttpCallBack $httpCallBack)
    {
        parent::__construct($config, $authManagers, $httpCallBack);
    }

    /**
     * This endpoint ...
     *
     * @param Models\TransactionCredit|null $body TBD
     *
     * @return Models\TBD Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function asyncCredit(?Models\TransactionCredit $body = null): Models\TBD
    {
        //prepare query string for API call
        $_queryBuilder = '/v1/merchant/transactions/async_credit';

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'X-API-Key' => $this->config->getXAPIKey(),
            'Content-Type'    => 'application/json'
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($body);

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'TBD');
    }

    /**
     * This captures funds for the designated transaction. A capture can be done for any partial amount or
     * for the total authorized amount. *Note that the actual JSON response will return all transaction
     * details, but the fields documented below are the only fields relevant to this request.*
     *
     *
     * @param string $xNonce Unique 12-16 digit for every request
     * @param Models\CaptureTransaction|null $body Capture a Transaction
     *
     * @return Models\TransactionView Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function captureTransaction(string $xNonce, ?Models\CaptureTransaction $body = null): Models\TransactionView
    {
        //prepare query string for API call
        $_queryBuilder = '/v1/merchant/transactions/capture';

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'X-API-Key' => $this->config->getXAPIKey(),
            'X-Nonce'         => $xNonce,
            'Content-Type'    => 'application/json'
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($body);

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 403) {
            throw $this->createExceptionFromJson(
                '\\BoltAPILib\\Exceptions\\V1MerchantTransactionsCapture403ErrorException',
                'Forbidden',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 404) {
            throw $this->createExceptionFromJson(
                '\\BoltAPILib\\Exceptions\\TBDErrorException',
                'Generic Error Schema',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 422) {
            throw $this->createExceptionFromJson(
                '\\BoltAPILib\\Exceptions\\V1MerchantTransactionsCapture422ErrorException',
                'Unprocessable Entity',
                $_httpRequest,
                $_httpResponse
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'TransactionView');
    }

    /**
     * This refunds a captured transaction. Refunds can be done for any partial amount or for the total
     * authorized amount. The `CreditCardRefund` response contains only the most relevant fields and is not
     * a full response; see the `TransactionDetails` response for a full example.
     *
     *
     * @param string $xNonce Unique 12-16 digit for every request
     * @param Models\TransactionCredit|null $body Refund a Transaction
     *
     * @return Models\TransactionView|Models\CreditCardRefund Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function refund(string $xNonce, ?Models\TransactionCredit $body = null)
    {
        //prepare query string for API call
        $_queryBuilder = '/v1/merchant/transactions/credit';

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'X-API-Key' => $this->config->getXAPIKey(),
            'X-Nonce'         => $xNonce,
            'Content-Type'    => 'application/json'
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($body);

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 403) {
            throw $this->createExceptionFromJson(
                '\\BoltAPILib\\Exceptions\\TBDErrorException',
                'Generic Error Schema',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 404) {
            throw $this->createExceptionFromJson(
                '\\BoltAPILib\\Exceptions\\TBDErrorException',
                'Generic Error Schema',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 422) {
            throw $this->createExceptionFromJson(
                '\\BoltAPILib\\Exceptions\\TBDErrorException',
                'Generic Error Schema',
                $_httpRequest,
                $_httpResponse
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapTypes(
            $_httpRequest,
            $_httpResponse,
            $response->body,
            'oneOf(TransactionView,CreditCardRefund)'
        );
    }

    /**
     * This voids the authorization for a given transaction. Voids must be completed before the
     * authorization is captured. Although the response returns all transaction details, only `id` and
     * `status` are needed.
     *
     *
     * @param string $xNonce Unique 12-16 digit for every request
     * @param Models\CreditCardVoid|null $body Void a Transaction
     *
     * @return Models\CreditCardVoidView|Models\TransactionView Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function void(string $xNonce, ?Models\CreditCardVoid $body = null)
    {
        //prepare query string for API call
        $_queryBuilder = '/v1/merchant/transactions/void';

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'X-API-Key' => $this->config->getXAPIKey(),
            'X-Nonce'         => $xNonce,
            'Content-Type'    => 'application/json'
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($body);

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 403) {
            throw $this->createExceptionFromJson(
                '\\BoltAPILib\\Exceptions\\TBDErrorException',
                'Generic Error Schema',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 404) {
            throw $this->createExceptionFromJson(
                '\\BoltAPILib\\Exceptions\\V1MerchantTransactionsVoid404ErrorException',
                'Generic Error Schema',
                $_httpRequest,
                $_httpResponse
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapTypes(
            $_httpRequest,
            $_httpResponse,
            $response->body,
            'oneOf(CreditCardVoidView,TransactionView)'
        );
    }

    /**
     * This endpoint authorizes payments using both saved payment methods and unsaved payment methods. For
     * guest-checkout flows and one-time payments, use the `MerchantCreditCardAuthorization` request
     * example; for logged-in checkout flows using saved payment methods (either as a one-time purchase or
     * as a reoccuring subscription), use the `MerchantCreditCardAuthorizationRecharge` request example.
     *
     * @param string $xNonce Unique 12-16 digit for every request
     * @param string|null $xPublishableKey The public API key used to identify the merchant. This
     *        key is found in the Developer > API section of the Bolt Merchant Dashboard.
     * @param Models\MerchantCreditCardAuthorization|null|Models\MerchantCreditCardAuthorizationRecharge $body
     *        Authorize a Transaction
     *
     * @return Models\IAuthorizeResultView Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function merchantAuthorize(
        string $xNonce,
        ?string $xPublishableKey = null,
        ?Models\MerchantCreditCardAuthorizationRecharge $body = null
    ): Models\IAuthorizeResultView {
        //verification for oneOf/anyOf types
        $body = ApiHelper::verifyTypes(
            $body,
            'anyOf(oneOf(MerchantCreditCardAuthorization,MerchantCreditCardAuthorizationRecharge),null)'
        );

        //prepare query string for API call
        $_queryBuilder = '/v1/merchant/transactions/authorize';

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'      => self::$userAgent,
            'Accept'          => 'application/json',
            'X-API-Key' => $this->config->getXAPIKey(),
            'X-Nonce'           => $xNonce,
            'Content-Type'      => 'application/json',
            'X-Publishable-Key' => $xPublishableKey
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($body);

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'IAuthorizeResultView');
    }

    /**
     * TBD
     *
     * @param string $xNonce Unique 12-16 digit for every request
     * @param Models\MerchantCreditCardReview|null $body Review a Transaction
     *
     * @return Models\TransactionDetailsView Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function reviewTransaction(
        string $xNonce,
        ?Models\MerchantCreditCardReview $body = null
    ): Models\TransactionDetailsView {
        //prepare query string for API call
        $_queryBuilder = '/v1/merchant/transactions/review';

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'X-API-Key' => $this->config->getXAPIKey(),
            'X-Nonce'         => $xNonce,
            'Content-Type'    => 'application/json'
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($body);

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'TransactionDetailsView');
    }

    /**
     * TBD
     *
     * @param string $rEFERENCE This is the Bolt transaction reference. (ex. N7Y3-NFKC-VFRF)
     * @param string $xNonce Unique 12-16 digit for every request
     *
     * @return Models\TransactionDetailsView Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getTransactionDetails(string $rEFERENCE, string $xNonce): Models\TransactionDetailsView
    {
        //prepare query string for API call
        $_queryBuilder = '/v1/merchant/transactions/{REFERENCE}';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'REFERENCE' => $rEFERENCE,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'X-API-Key' => $this->config->getXAPIKey(),
            'X-Nonce'         => $xNonce
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 403) {
            throw $this->createExceptionFromJson(
                '\\BoltAPILib\\Exceptions\\TBDErrorException',
                'Generic Error Schema',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 422) {
            throw $this->createExceptionFromJson(
                '\\BoltAPILib\\Exceptions\\TBDErrorException',
                'Generic Error Schema',
                $_httpRequest,
                $_httpResponse
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'TransactionDetailsView');
    }
}
