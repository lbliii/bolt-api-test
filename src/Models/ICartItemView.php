<?php

declare(strict_types=1);

/*
 * BoltAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace BoltAPILib\Models;

use stdClass;

class ICartItemView implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $reference;

    /**
     * @var string|null
     */
    private $name;

    /**
     * @var string|null
     */
    private $description;

    /**
     * @var string|null
     */
    private $options;

    /**
     * @var AmountView|null
     */
    private $totalAmount;

    /**
     * @var AmountView|null
     */
    private $unitPrice;

    /**
     * @var AmountView|null
     */
    private $taxAmount;

    /**
     * @var int|null
     */
    private $quantity;

    /**
     * @var array
     */
    private $uom = [];

    /**
     * @var array
     */
    private $upc = [];

    /**
     * @var array
     */
    private $sku = [];

    /**
     * @var array
     */
    private $isbn = [];

    /**
     * @var string|null
     */
    private $brand;

    /**
     * @var array
     */
    private $manufacturer = [];

    /**
     * @var array
     */
    private $category = [];

    /**
     * @var string[]|null
     */
    private $collections;

    /**
     * @var CartItemProperty[]|null
     */
    private $properties;

    /**
     * @var string|null
     */
    private $tags;

    /**
     * @var string|null
     */
    private $color;

    /**
     * @var string|null
     */
    private $size;

    /**
     * @var IWeight|null
     */
    private $weight;

    /**
     * @var string|null
     */
    private $imageUrl;

    /**
     * @var string|null
     */
    private $detailsUrl;

    /**
     * @var string|null
     */
    private $type;

    /**
     * @var float|null
     */
    private $shopifyProductReference;

    /**
     * @var int|null
     */
    private $shopifyProductVariantReference;

    /**
     * @var bool|null
     */
    private $taxable;

    /**
     * @var string|null
     */
    private $taxCode;

    /**
     * @var string|null
     */
    private $itemGroup;

    /**
     * @var string|null
     */
    private $source;

    /**
     * @var string|null
     */
    private $shipmentType;

    /**
     * @var CartItemCustomization[]|null
     */
    private $customizations;

    /**
     * Returns Reference.
     */
    public function getReference(): ?string
    {
        return $this->reference;
    }

    /**
     * Sets Reference.
     *
     * @maps reference
     */
    public function setReference(?string $reference): void
    {
        $this->reference = $reference;
    }

    /**
     * Returns Name.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     *
     * @maps name
     */
    public function setName(?string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Description.
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * Sets Description.
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description = $description;
    }

    /**
     * Returns Options.
     */
    public function getOptions(): ?string
    {
        return $this->options;
    }

    /**
     * Sets Options.
     *
     * @maps options
     */
    public function setOptions(?string $options): void
    {
        $this->options = $options;
    }

    /**
     * Returns Total Amount.
     */
    public function getTotalAmount(): ?AmountView
    {
        return $this->totalAmount;
    }

    /**
     * Sets Total Amount.
     *
     * @maps total_amount
     */
    public function setTotalAmount(?AmountView $totalAmount): void
    {
        $this->totalAmount = $totalAmount;
    }

    /**
     * Returns Unit Price.
     */
    public function getUnitPrice(): ?AmountView
    {
        return $this->unitPrice;
    }

    /**
     * Sets Unit Price.
     *
     * @maps unit_price
     */
    public function setUnitPrice(?AmountView $unitPrice): void
    {
        $this->unitPrice = $unitPrice;
    }

    /**
     * Returns Tax Amount.
     */
    public function getTaxAmount(): ?AmountView
    {
        return $this->taxAmount;
    }

    /**
     * Sets Tax Amount.
     *
     * @maps tax_amount
     */
    public function setTaxAmount(?AmountView $taxAmount): void
    {
        $this->taxAmount = $taxAmount;
    }

    /**
     * Returns Quantity.
     */
    public function getQuantity(): ?int
    {
        return $this->quantity;
    }

    /**
     * Sets Quantity.
     *
     * @maps quantity
     */
    public function setQuantity(?int $quantity): void
    {
        $this->quantity = $quantity;
    }

    /**
     * Returns Uom.
     *
     * Used to define the unit of measure used to describe the product.
     */
    public function getUom(): ?string
    {
        if (count($this->uom) == 0) {
            return null;
        }
        return $this->uom['value'];
    }

    /**
     * Sets Uom.
     *
     * Used to define the unit of measure used to describe the product.
     *
     * @maps uom
     */
    public function setUom(?string $uom): void
    {
        $this->uom['value'] = $uom;
    }

    /**
     * Unsets Uom.
     *
     * Used to define the unit of measure used to describe the product.
     */
    public function unsetUom(): void
    {
        $this->uom = [];
    }

    /**
     * Returns Upc.
     *
     * Used to define the 12-digit Universal Product Code (a barcode) associated with the item worldwide.
     */
    public function getUpc(): ?string
    {
        if (count($this->upc) == 0) {
            return null;
        }
        return $this->upc['value'];
    }

    /**
     * Sets Upc.
     *
     * Used to define the 12-digit Universal Product Code (a barcode) associated with the item worldwide.
     *
     * @maps upc
     */
    public function setUpc(?string $upc): void
    {
        $this->upc['value'] = $upc;
    }

    /**
     * Unsets Upc.
     *
     * Used to define the 12-digit Universal Product Code (a barcode) associated with the item worldwide.
     */
    public function unsetUpc(): void
    {
        $this->upc = [];
    }

    /**
     * Returns Sku.
     *
     * Used to define an alpha-numberic Stock Keeping Unit associated with the item as it is mapped to your
     * internal product catalogue.
     */
    public function getSku(): ?string
    {
        if (count($this->sku) == 0) {
            return null;
        }
        return $this->sku['value'];
    }

    /**
     * Sets Sku.
     *
     * Used to define an alpha-numberic Stock Keeping Unit associated with the item as it is mapped to your
     * internal product catalogue.
     *
     * @maps sku
     */
    public function setSku(?string $sku): void
    {
        $this->sku['value'] = $sku;
    }

    /**
     * Unsets Sku.
     *
     * Used to define an alpha-numberic Stock Keeping Unit associated with the item as it is mapped to your
     * internal product catalogue.
     */
    public function unsetSku(): void
    {
        $this->sku = [];
    }

    /**
     * Returns Isbn.
     *
     * Used to define the International Standard Book Number associated with the book.
     */
    public function getIsbn(): ?string
    {
        if (count($this->isbn) == 0) {
            return null;
        }
        return $this->isbn['value'];
    }

    /**
     * Sets Isbn.
     *
     * Used to define the International Standard Book Number associated with the book.
     *
     * @maps isbn
     */
    public function setIsbn(?string $isbn): void
    {
        $this->isbn['value'] = $isbn;
    }

    /**
     * Unsets Isbn.
     *
     * Used to define the International Standard Book Number associated with the book.
     */
    public function unsetIsbn(): void
    {
        $this->isbn = [];
    }

    /**
     * Returns Brand.
     */
    public function getBrand(): ?string
    {
        return $this->brand;
    }

    /**
     * Sets Brand.
     *
     * @maps brand
     */
    public function setBrand(?string $brand): void
    {
        $this->brand = $brand;
    }

    /**
     * Returns Manufacturer.
     *
     * Used to define the organization that manufactured the item.
     */
    public function getManufacturer(): ?string
    {
        if (count($this->manufacturer) == 0) {
            return null;
        }
        return $this->manufacturer['value'];
    }

    /**
     * Sets Manufacturer.
     *
     * Used to define the organization that manufactured the item.
     *
     * @maps manufacturer
     */
    public function setManufacturer(?string $manufacturer): void
    {
        $this->manufacturer['value'] = $manufacturer;
    }

    /**
     * Unsets Manufacturer.
     *
     * Used to define the organization that manufactured the item.
     */
    public function unsetManufacturer(): void
    {
        $this->manufacturer = [];
    }

    /**
     * Returns Category.
     *
     * Used to define a product category associated with the item.
     */
    public function getCategory(): ?string
    {
        if (count($this->category) == 0) {
            return null;
        }
        return $this->category['value'];
    }

    /**
     * Sets Category.
     *
     * Used to define a product category associated with the item.
     *
     * @maps category
     */
    public function setCategory(?string $category): void
    {
        $this->category['value'] = $category;
    }

    /**
     * Unsets Category.
     *
     * Used to define a product category associated with the item.
     */
    public function unsetCategory(): void
    {
        $this->category = [];
    }

    /**
     * Returns Collections.
     *
     * @return string[]|null
     */
    public function getCollections(): ?array
    {
        return $this->collections;
    }

    /**
     * Sets Collections.
     *
     * @maps collections
     *
     * @param string[]|null $collections
     */
    public function setCollections(?array $collections): void
    {
        $this->collections = $collections;
    }

    /**
     * Returns Properties.
     *
     * @return CartItemProperty[]|null
     */
    public function getProperties(): ?array
    {
        return $this->properties;
    }

    /**
     * Sets Properties.
     *
     * @maps properties
     *
     * @param CartItemProperty[]|null $properties
     */
    public function setProperties(?array $properties): void
    {
        $this->properties = $properties;
    }

    /**
     * Returns Tags.
     *
     * Used to define a comma-separated list of tags associated with the item.
     */
    public function getTags(): ?string
    {
        return $this->tags;
    }

    /**
     * Sets Tags.
     *
     * Used to define a comma-separated list of tags associated with the item.
     *
     * @maps tags
     */
    public function setTags(?string $tags): void
    {
        $this->tags = $tags;
    }

    /**
     * Returns Color.
     *
     * Used to define the color of the item.
     */
    public function getColor(): ?string
    {
        return $this->color;
    }

    /**
     * Sets Color.
     *
     * Used to define the color of the item.
     *
     * @maps color
     */
    public function setColor(?string $color): void
    {
        $this->color = $color;
    }

    /**
     * Returns Size.
     *
     * Used to define the size of the item.
     */
    public function getSize(): ?string
    {
        return $this->size;
    }

    /**
     * Sets Size.
     *
     * Used to define the size of the item.
     *
     * @maps size
     */
    public function setSize(?string $size): void
    {
        $this->size = $size;
    }

    /**
     * Returns Weight.
     */
    public function getWeight(): ?IWeight
    {
        return $this->weight;
    }

    /**
     * Sets Weight.
     *
     * @maps weight
     */
    public function setWeight(?IWeight $weight): void
    {
        $this->weight = $weight;
    }

    /**
     * Returns Image Url.
     *
     * Used to provide a link to the image associated with the item.
     */
    public function getImageUrl(): ?string
    {
        return $this->imageUrl;
    }

    /**
     * Sets Image Url.
     *
     * Used to provide a link to the image associated with the item.
     *
     * @maps image_url
     */
    public function setImageUrl(?string $imageUrl): void
    {
        $this->imageUrl = $imageUrl;
    }

    /**
     * Returns Details Url.
     *
     * Used to provide a link to the item's product page.
     */
    public function getDetailsUrl(): ?string
    {
        return $this->detailsUrl;
    }

    /**
     * Sets Details Url.
     *
     * Used to provide a link to the item's product page.
     *
     * @maps details_url
     */
    public function setDetailsUrl(?string $detailsUrl): void
    {
        $this->detailsUrl = $detailsUrl;
    }

    /**
     * Returns Type.
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     *
     * @maps type
     */
    public function setType(?string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Shopify Product Reference.
     */
    public function getShopifyProductReference(): ?float
    {
        return $this->shopifyProductReference;
    }

    /**
     * Sets Shopify Product Reference.
     *
     * @maps shopify_product_reference
     */
    public function setShopifyProductReference(?float $shopifyProductReference): void
    {
        $this->shopifyProductReference = $shopifyProductReference;
    }

    /**
     * Returns Shopify Product Variant Reference.
     */
    public function getShopifyProductVariantReference(): ?int
    {
        return $this->shopifyProductVariantReference;
    }

    /**
     * Sets Shopify Product Variant Reference.
     *
     * @maps shopify_product_variant_reference
     */
    public function setShopifyProductVariantReference(?int $shopifyProductVariantReference): void
    {
        $this->shopifyProductVariantReference = $shopifyProductVariantReference;
    }

    /**
     * Returns Taxable.
     */
    public function getTaxable(): ?bool
    {
        return $this->taxable;
    }

    /**
     * Sets Taxable.
     *
     * @maps taxable
     */
    public function setTaxable(?bool $taxable): void
    {
        $this->taxable = $taxable;
    }

    /**
     * Returns Tax Code.
     */
    public function getTaxCode(): ?string
    {
        return $this->taxCode;
    }

    /**
     * Sets Tax Code.
     *
     * @maps tax_code
     */
    public function setTaxCode(?string $taxCode): void
    {
        $this->taxCode = $taxCode;
    }

    /**
     * Returns Item Group.
     */
    public function getItemGroup(): ?string
    {
        return $this->itemGroup;
    }

    /**
     * Sets Item Group.
     *
     * @maps item_group
     */
    public function setItemGroup(?string $itemGroup): void
    {
        $this->itemGroup = $itemGroup;
    }

    /**
     * Returns Source.
     */
    public function getSource(): ?string
    {
        return $this->source;
    }

    /**
     * Sets Source.
     *
     * @maps source
     */
    public function setSource(?string $source): void
    {
        $this->source = $source;
    }

    /**
     * Returns Shipment Type.
     */
    public function getShipmentType(): ?string
    {
        return $this->shipmentType;
    }

    /**
     * Sets Shipment Type.
     *
     * @maps shipment_type
     */
    public function setShipmentType(?string $shipmentType): void
    {
        $this->shipmentType = $shipmentType;
    }

    /**
     * Returns Customizations.
     *
     * @return CartItemCustomization[]|null
     */
    public function getCustomizations(): ?array
    {
        return $this->customizations;
    }

    /**
     * Sets Customizations.
     *
     * @maps customizations
     *
     * @param CartItemCustomization[]|null $customizations
     */
    public function setCustomizations(?array $customizations): void
    {
        $this->customizations = $customizations;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->reference)) {
            $json['reference']                         = $this->reference;
        }
        if (isset($this->name)) {
            $json['name']                              = $this->name;
        }
        if (isset($this->description)) {
            $json['description']                       = $this->description;
        }
        if (isset($this->options)) {
            $json['options']                           = $this->options;
        }
        if (isset($this->totalAmount)) {
            $json['total_amount']                      = $this->totalAmount;
        }
        if (isset($this->unitPrice)) {
            $json['unit_price']                        = $this->unitPrice;
        }
        if (isset($this->taxAmount)) {
            $json['tax_amount']                        = $this->taxAmount;
        }
        if (isset($this->quantity)) {
            $json['quantity']                          = $this->quantity;
        }
        if (!empty($this->uom)) {
            $json['uom']                               = $this->uom['value'];
        }
        if (!empty($this->upc)) {
            $json['upc']                               = $this->upc['value'];
        }
        if (!empty($this->sku)) {
            $json['sku']                               = $this->sku['value'];
        }
        if (!empty($this->isbn)) {
            $json['isbn']                              = $this->isbn['value'];
        }
        if (isset($this->brand)) {
            $json['brand']                             = $this->brand;
        }
        if (!empty($this->manufacturer)) {
            $json['manufacturer']                      = $this->manufacturer['value'];
        }
        if (!empty($this->category)) {
            $json['category']                          = $this->category['value'];
        }
        if (isset($this->collections)) {
            $json['collections']                       = $this->collections;
        }
        if (isset($this->properties)) {
            $json['properties']                        = $this->properties;
        }
        if (isset($this->tags)) {
            $json['tags']                              = $this->tags;
        }
        if (isset($this->color)) {
            $json['color']                             = $this->color;
        }
        if (isset($this->size)) {
            $json['size']                              = $this->size;
        }
        if (isset($this->weight)) {
            $json['weight']                            = $this->weight;
        }
        if (isset($this->imageUrl)) {
            $json['image_url']                         = $this->imageUrl;
        }
        if (isset($this->detailsUrl)) {
            $json['details_url']                       = $this->detailsUrl;
        }
        if (isset($this->type)) {
            $json['type']                              = $this->type;
        }
        if (isset($this->shopifyProductReference)) {
            $json['shopify_product_reference']         = $this->shopifyProductReference;
        }
        if (isset($this->shopifyProductVariantReference)) {
            $json['shopify_product_variant_reference'] = $this->shopifyProductVariantReference;
        }
        if (isset($this->taxable)) {
            $json['taxable']                           = $this->taxable;
        }
        if (isset($this->taxCode)) {
            $json['tax_code']                          = $this->taxCode;
        }
        if (isset($this->itemGroup)) {
            $json['item_group']                        = $this->itemGroup;
        }
        if (isset($this->source)) {
            $json['source']                            = $this->source;
        }
        if (isset($this->shipmentType)) {
            $json['shipment_type']                     = $this->shipmentType;
        }
        if (isset($this->customizations)) {
            $json['customizations']                    = $this->customizations;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
