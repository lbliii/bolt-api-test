<?php

declare(strict_types=1);

/*
 * BoltAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace BoltAPILib\Models;

use stdClass;

/**
 * This request is used for authorizing an existing, saved card associated with the account.
 */
class MerchantCreditCardAuthorizationRecharge implements \JsonSerializable
{
    /**
     * @var CartCreate
     */
    private $cart;

    /**
     * @var string|null
     */
    private $consumerId;

    /**
     * @var string
     */
    private $creditCardId;

    /**
     * @var string
     */
    private $source;

    /**
     * @var UserIdentifier
     */
    private $userIdentifier;

    /**
     * @var UserIdentity
     */
    private $userIdentity;

    /**
     * @param CartCreate $cart
     * @param string $creditCardId
     * @param string $source
     * @param UserIdentifier $userIdentifier
     * @param UserIdentity $userIdentity
     */
    public function __construct(
        CartCreate $cart,
        string $creditCardId,
        string $source,
        UserIdentifier $userIdentifier,
        UserIdentity $userIdentity
    ) {
        $this->cart = $cart;
        $this->creditCardId = $creditCardId;
        $this->source = $source;
        $this->userIdentifier = $userIdentifier;
        $this->userIdentity = $userIdentity;
    }

    /**
     * Returns Cart.
     */
    public function getCart(): CartCreate
    {
        return $this->cart;
    }

    /**
     * Sets Cart.
     *
     * @required
     * @maps cart
     */
    public function setCart(CartCreate $cart): void
    {
        $this->cart = $cart;
    }

    /**
     * Returns Consumer Id.
     *
     * The unique ID associated with the shopper. Leave `null` for guest checkout payment authorizations.
     */
    public function getConsumerId(): ?string
    {
        return $this->consumerId;
    }

    /**
     * Sets Consumer Id.
     *
     * The unique ID associated with the shopper. Leave `null` for guest checkout payment authorizations.
     *
     * @maps consumer_id
     */
    public function setConsumerId(?string $consumerId): void
    {
        $this->consumerId = $consumerId;
    }

    /**
     * Returns Credit Card Id.
     *
     * The unique ID associated to a saved credit card in the account's wallet. Leave `null` if inputting a
     * new, unsaved card.
     */
    public function getCreditCardId(): string
    {
        return $this->creditCardId;
    }

    /**
     * Sets Credit Card Id.
     *
     * The unique ID associated to a saved credit card in the account's wallet. Leave `null` if inputting a
     * new, unsaved card.
     *
     * @required
     * @maps credit_card_id
     */
    public function setCreditCardId(string $creditCardId): void
    {
        $this->creditCardId = $creditCardId;
    }

    /**
     * Returns Source.
     */
    public function getSource(): string
    {
        return $this->source;
    }

    /**
     * Sets Source.
     *
     * @required
     * @maps source
     */
    public function setSource(string $source): void
    {
        $this->source = $source;
    }

    /**
     * Returns User Identifier.
     *
     * The object containing key lookup IDs associated with the shopper's account, such as the unqiue email
     * address and phone number.
     */
    public function getUserIdentifier(): UserIdentifier
    {
        return $this->userIdentifier;
    }

    /**
     * Sets User Identifier.
     *
     * The object containing key lookup IDs associated with the shopper's account, such as the unqiue email
     * address and phone number.
     *
     * @required
     * @maps user_identifier
     */
    public function setUserIdentifier(UserIdentifier $userIdentifier): void
    {
        $this->userIdentifier = $userIdentifier;
    }

    /**
     * Returns User Identity.
     *
     * The object containing the account owner's first and last name.
     */
    public function getUserIdentity(): UserIdentity
    {
        return $this->userIdentity;
    }

    /**
     * Sets User Identity.
     *
     * The object containing the account owner's first and last name.
     *
     * @required
     * @maps user_identity
     */
    public function setUserIdentity(UserIdentity $userIdentity): void
    {
        $this->userIdentity = $userIdentity;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['cart']            = $this->cart;
        if (isset($this->consumerId)) {
            $json['consumer_id'] = $this->consumerId;
        }
        $json['credit_card_id']  = $this->creditCardId;
        $json['source']          = $this->source;
        $json['user_identifier'] = $this->userIdentifier;
        $json['user_identity']   = $this->userIdentity;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
