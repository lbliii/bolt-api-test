<?php

declare(strict_types=1);

/*
 * BoltAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace BoltAPILib\Models;

use stdClass;

/**
 * The BaseCart object contains the core details typically found in most cart objects, including items,
 * discounts, amount totals, shipments, and in-store pickups.
 */
class BaseCart implements \JsonSerializable
{
    /**
     * @var int
     */
    private $totalAmount;

    /**
     * @var CartItem[]
     */
    private $items;

    /**
     * @var int|null
     */
    private $taxAmount;

    /**
     * @var array
     */
    private $billingAddressId = [];

    /**
     * @var Address|null
     */
    private $billingAddress;

    /**
     * @var CartShipment[]
     */
    private $shipments;

    /**
     * @var InStoreCartShipment[]
     */
    private $inStoreCartShipments;

    /**
     * @var CartDiscount[]
     */
    private $discounts;

    /**
     * @var string
     */
    private $discountCode;

    /**
     * @var string|null
     */
    private $discountSource;

    /**
     * @param int $totalAmount
     * @param CartItem[] $items
     * @param CartShipment[] $shipments
     * @param InStoreCartShipment[] $inStoreCartShipments
     * @param CartDiscount[] $discounts
     * @param string $discountCode
     */
    public function __construct(
        int $totalAmount,
        array $items,
        array $shipments,
        array $inStoreCartShipments,
        array $discounts,
        string $discountCode
    ) {
        $this->totalAmount = $totalAmount;
        $this->items = $items;
        $this->shipments = $shipments;
        $this->inStoreCartShipments = $inStoreCartShipments;
        $this->discounts = $discounts;
        $this->discountCode = $discountCode;
    }

    /**
     * Returns Total Amount.
     *
     * The total amount, in cents, of the cart including its items and taxes if applicable. This total must
     * match the sum of all other amounts.
     */
    public function getTotalAmount(): int
    {
        return $this->totalAmount;
    }

    /**
     * Sets Total Amount.
     *
     * The total amount, in cents, of the cart including its items and taxes if applicable. This total must
     * match the sum of all other amounts.
     *
     * @required
     * @maps total_amount
     */
    public function setTotalAmount(int $totalAmount): void
    {
        $this->totalAmount = $totalAmount;
    }

    /**
     * Returns Items.
     *
     * The list of items associated with the cart.
     *
     * @return CartItem[]
     */
    public function getItems(): array
    {
        return $this->items;
    }

    /**
     * Sets Items.
     *
     * The list of items associated with the cart.
     *
     * @required
     * @maps items
     *
     * @param CartItem[] $items
     */
    public function setItems(array $items): void
    {
        $this->items = $items;
    }

    /**
     * Returns Tax Amount.
     *
     * The total tax amount for all of the items associated with the cart.
     */
    public function getTaxAmount(): ?int
    {
        return $this->taxAmount;
    }

    /**
     * Sets Tax Amount.
     *
     * The total tax amount for all of the items associated with the cart.
     *
     * @maps tax_amount
     */
    public function setTaxAmount(?int $taxAmount): void
    {
        $this->taxAmount = $taxAmount;
    }

    /**
     * Returns Billing Address Id.
     *
     * The unique Bolt ID associated with the billing address. Must be `null` if this address has never
     * been saved to a Bolt account.
     */
    public function getBillingAddressId(): ?string
    {
        if (count($this->billingAddressId) == 0) {
            return null;
        }
        return $this->billingAddressId['value'];
    }

    /**
     * Sets Billing Address Id.
     *
     * The unique Bolt ID associated with the billing address. Must be `null` if this address has never
     * been saved to a Bolt account.
     *
     * @maps billing_address_id
     */
    public function setBillingAddressId(?string $billingAddressId): void
    {
        $this->billingAddressId['value'] = $billingAddressId;
    }

    /**
     * Unsets Billing Address Id.
     *
     * The unique Bolt ID associated with the billing address. Must be `null` if this address has never
     * been saved to a Bolt account.
     */
    public function unsetBillingAddressId(): void
    {
        $this->billingAddressId = [];
    }

    /**
     * Returns Billing Address.
     *
     * The Address object is used for billing, shipping, and physical store address use cases.
     */
    public function getBillingAddress(): ?Address
    {
        return $this->billingAddress;
    }

    /**
     * Sets Billing Address.
     *
     * The Address object is used for billing, shipping, and physical store address use cases.
     *
     * @maps billing_address
     */
    public function setBillingAddress(?Address $billingAddress): void
    {
        $this->billingAddress = $billingAddress;
    }

    /**
     * Returns Shipments.
     *
     * @return CartShipment[]
     */
    public function getShipments(): array
    {
        return $this->shipments;
    }

    /**
     * Sets Shipments.
     *
     * @required
     * @maps shipments
     *
     * @param CartShipment[] $shipments
     */
    public function setShipments(array $shipments): void
    {
        $this->shipments = $shipments;
    }

    /**
     * Returns In Store Cart Shipments.
     *
     * @return InStoreCartShipment[]
     */
    public function getInStoreCartShipments(): array
    {
        return $this->inStoreCartShipments;
    }

    /**
     * Sets In Store Cart Shipments.
     *
     * @required
     * @maps in_store_cart_shipments
     *
     * @param InStoreCartShipment[] $inStoreCartShipments
     */
    public function setInStoreCartShipments(array $inStoreCartShipments): void
    {
        $this->inStoreCartShipments = $inStoreCartShipments;
    }

    /**
     * Returns Discounts.
     *
     * @return CartDiscount[]
     */
    public function getDiscounts(): array
    {
        return $this->discounts;
    }

    /**
     * Sets Discounts.
     *
     * @required
     * @maps discounts
     *
     * @param CartDiscount[] $discounts
     */
    public function setDiscounts(array $discounts): void
    {
        $this->discounts = $discounts;
    }

    /**
     * Returns Discount Code.
     *
     * The discount code provided.
     */
    public function getDiscountCode(): string
    {
        return $this->discountCode;
    }

    /**
     * Sets Discount Code.
     *
     * The discount code provided.
     *
     * @required
     * @maps discount_code
     */
    public function setDiscountCode(string $discountCode): void
    {
        $this->discountCode = $discountCode;
    }

    /**
     * Returns Discount Source.
     *
     * Used to define the source of the discount applied.
     */
    public function getDiscountSource(): ?string
    {
        return $this->discountSource;
    }

    /**
     * Sets Discount Source.
     *
     * Used to define the source of the discount applied.
     *
     * @maps discount_source
     */
    public function setDiscountSource(?string $discountSource): void
    {
        $this->discountSource = $discountSource;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['total_amount']            = $this->totalAmount;
        $json['items']                   = $this->items;
        if (isset($this->taxAmount)) {
            $json['tax_amount']          = $this->taxAmount;
        }
        if (!empty($this->billingAddressId)) {
            $json['billing_address_id']  = $this->billingAddressId['value'];
        }
        if (isset($this->billingAddress)) {
            $json['billing_address']     = $this->billingAddress;
        }
        $json['shipments']               = $this->shipments;
        $json['in_store_cart_shipments'] = $this->inStoreCartShipments;
        $json['discounts']               = $this->discounts;
        $json['discount_code']           = $this->discountCode;
        if (isset($this->discountSource)) {
            $json['discount_source']     = $this->discountSource;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
