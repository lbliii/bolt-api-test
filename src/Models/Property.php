<?php

declare(strict_types=1);

/*
 * BoltAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace BoltAPILib\Models;

use stdClass;

class Property implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $name;

    /**
     * @var string|null
     */
    private $nameID;

    /**
     * @var string|null
     */
    private $value;

    /**
     * @var int|null
     */
    private $valueID;

    /**
     * Returns Name.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     *
     * @maps Name
     */
    public function setName(?string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Name ID.
     */
    public function getNameID(): ?string
    {
        return $this->nameID;
    }

    /**
     * Sets Name ID.
     *
     * @maps NameID
     */
    public function setNameID(?string $nameID): void
    {
        $this->nameID = $nameID;
    }

    /**
     * Returns Value.
     */
    public function getValue(): ?string
    {
        return $this->value;
    }

    /**
     * Sets Value.
     *
     * @maps Value
     */
    public function setValue(?string $value): void
    {
        $this->value = $value;
    }

    /**
     * Returns Value ID.
     */
    public function getValueID(): ?int
    {
        return $this->valueID;
    }

    /**
     * Sets Value ID.
     *
     * @maps ValueID
     */
    public function setValueID(?int $valueID): void
    {
        $this->valueID = $valueID;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->name)) {
            $json['Name']    = $this->name;
        }
        if (isset($this->nameID)) {
            $json['NameID']  = $this->nameID;
        }
        if (isset($this->value)) {
            $json['Value']   = $this->value;
        }
        if (isset($this->valueID)) {
            $json['ValueID'] = $this->valueID;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
