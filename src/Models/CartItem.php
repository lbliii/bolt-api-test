<?php

declare(strict_types=1);

/*
 * BoltAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace BoltAPILib\Models;

use stdClass;

class CartItem implements \JsonSerializable
{
    /**
     * @var string
     */
    private $reference;

    /**
     * @var string
     */
    private $name;

    /**
     * @var array
     */
    private $description = [];

    /**
     * @var array
     */
    private $options = [];

    /**
     * @var int
     */
    private $totalAmount;

    /**
     * @var int
     */
    private $unitPrice;

    /**
     * @var array
     */
    private $taxAmount = [];

    /**
     * @var int
     */
    private $quantity;

    /**
     * @var array
     */
    private $uom = [];

    /**
     * @var array
     */
    private $upc = [];

    /**
     * @var array
     */
    private $sku = [];

    /**
     * @var array
     */
    private $isbn = [];

    /**
     * @var array
     */
    private $brand = [];

    /**
     * @var array
     */
    private $manufacturer = [];

    /**
     * @var array
     */
    private $category = [];

    /**
     * @var array
     */
    private $tags = [];

    /**
     * @var CartItemProperty[]
     */
    private $properties;

    /**
     * @var array
     */
    private $color = [];

    /**
     * @var array
     */
    private $size = [];

    /**
     * @var array
     */
    private $weight = [];

    /**
     * @var array
     */
    private $weightUnit = [];

    /**
     * @var string|null
     */
    private $imageUrl;

    /**
     * @var string|null
     */
    private $detailsUrl;

    /**
     * @var CartItemExternalInputs|null
     */
    private $externalInputs;

    /**
     * @var array
     */
    private $taxable = [];

    /**
     * @var array
     */
    private $taxCode = [];

    /**
     * @var string|null
     */
    private $type;

    /**
     * @var string[]
     */
    private $collections;

    /**
     * @var Subscription|null
     */
    private $subscription;

    /**
     * @var array
     */
    private $source = [];

    /**
     * @var array
     */
    private $itemGroup = [];

    /**
     * @var string|null
     */
    private $shipmentType;

    /**
     * @var CartItemCustomization[]
     */
    private $customizations;

    /**
     * @var array
     */
    private $msrp = [];

    /**
     * @param string $reference
     * @param string $name
     * @param int $totalAmount
     * @param int $unitPrice
     * @param int $quantity
     * @param CartItemProperty[] $properties
     * @param string[] $collections
     * @param CartItemCustomization[] $customizations
     */
    public function __construct(
        string $reference,
        string $name,
        int $totalAmount,
        int $unitPrice,
        int $quantity,
        array $properties,
        array $collections,
        array $customizations
    ) {
        $this->reference = $reference;
        $this->name = $name;
        $this->totalAmount = $totalAmount;
        $this->unitPrice = $unitPrice;
        $this->quantity = $quantity;
        $this->properties = $properties;
        $this->collections = $collections;
        $this->customizations = $customizations;
    }

    /**
     * Returns Reference.
     */
    public function getReference(): string
    {
        return $this->reference;
    }

    /**
     * Sets Reference.
     *
     * @required
     * @maps reference
     */
    public function setReference(string $reference): void
    {
        $this->reference = $reference;
    }

    /**
     * Returns Name.
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     *
     * @required
     * @maps name
     */
    public function setName(string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Description.
     */
    public function getDescription(): ?string
    {
        if (count($this->description) == 0) {
            return null;
        }
        return $this->description['value'];
    }

    /**
     * Sets Description.
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description['value'] = $description;
    }

    /**
     * Unsets Description.
     */
    public function unsetDescription(): void
    {
        $this->description = [];
    }

    /**
     * Returns Options.
     */
    public function getOptions(): ?string
    {
        if (count($this->options) == 0) {
            return null;
        }
        return $this->options['value'];
    }

    /**
     * Sets Options.
     *
     * @maps options
     */
    public function setOptions(?string $options): void
    {
        $this->options['value'] = $options;
    }

    /**
     * Unsets Options.
     */
    public function unsetOptions(): void
    {
        $this->options = [];
    }

    /**
     * Returns Total Amount.
     *
     * The total amount, in cents, of the item including its taxes if applicable.
     */
    public function getTotalAmount(): int
    {
        return $this->totalAmount;
    }

    /**
     * Sets Total Amount.
     *
     * The total amount, in cents, of the item including its taxes if applicable.
     *
     * @required
     * @maps total_amount
     */
    public function setTotalAmount(int $totalAmount): void
    {
        $this->totalAmount = $totalAmount;
    }

    /**
     * Returns Unit Price.
     *
     * The price of one unit of the item; for example, the price of one pack of socks.
     */
    public function getUnitPrice(): int
    {
        return $this->unitPrice;
    }

    /**
     * Sets Unit Price.
     *
     * The price of one unit of the item; for example, the price of one pack of socks.
     *
     * @required
     * @maps unit_price
     */
    public function setUnitPrice(int $unitPrice): void
    {
        $this->unitPrice = $unitPrice;
    }

    /**
     * Returns Tax Amount.
     *
     * The tax amount for the item; this value should scale with the quantity of units selected.
     */
    public function getTaxAmount(): ?int
    {
        if (count($this->taxAmount) == 0) {
            return null;
        }
        return $this->taxAmount['value'];
    }

    /**
     * Sets Tax Amount.
     *
     * The tax amount for the item; this value should scale with the quantity of units selected.
     *
     * @maps tax_amount
     */
    public function setTaxAmount(?int $taxAmount): void
    {
        $this->taxAmount['value'] = $taxAmount;
    }

    /**
     * Unsets Tax Amount.
     *
     * The tax amount for the item; this value should scale with the quantity of units selected.
     */
    public function unsetTaxAmount(): void
    {
        $this->taxAmount = [];
    }

    /**
     * Returns Quantity.
     */
    public function getQuantity(): int
    {
        return $this->quantity;
    }

    /**
     * Sets Quantity.
     *
     * @required
     * @maps quantity
     */
    public function setQuantity(int $quantity): void
    {
        $this->quantity = $quantity;
    }

    /**
     * Returns Uom.
     *
     * Used to define the unit of measure used to describe the item.
     */
    public function getUom(): ?string
    {
        if (count($this->uom) == 0) {
            return null;
        }
        return $this->uom['value'];
    }

    /**
     * Sets Uom.
     *
     * Used to define the unit of measure used to describe the item.
     *
     * @maps uom
     */
    public function setUom(?string $uom): void
    {
        $this->uom['value'] = $uom;
    }

    /**
     * Unsets Uom.
     *
     * Used to define the unit of measure used to describe the item.
     */
    public function unsetUom(): void
    {
        $this->uom = [];
    }

    /**
     * Returns Upc.
     *
     * Used to define the 12-digit Universal Product Code (a barcode) associated with the item worldwide.
     */
    public function getUpc(): ?string
    {
        if (count($this->upc) == 0) {
            return null;
        }
        return $this->upc['value'];
    }

    /**
     * Sets Upc.
     *
     * Used to define the 12-digit Universal Product Code (a barcode) associated with the item worldwide.
     *
     * @maps upc
     */
    public function setUpc(?string $upc): void
    {
        $this->upc['value'] = $upc;
    }

    /**
     * Unsets Upc.
     *
     * Used to define the 12-digit Universal Product Code (a barcode) associated with the item worldwide.
     */
    public function unsetUpc(): void
    {
        $this->upc = [];
    }

    /**
     * Returns Sku.
     *
     * Used to define the alpha-numberic Stock Keeping Unit associated with the item as it is mapped to
     * your internal product catalogue.
     */
    public function getSku(): ?string
    {
        if (count($this->sku) == 0) {
            return null;
        }
        return $this->sku['value'];
    }

    /**
     * Sets Sku.
     *
     * Used to define the alpha-numberic Stock Keeping Unit associated with the item as it is mapped to
     * your internal product catalogue.
     *
     * @maps sku
     */
    public function setSku(?string $sku): void
    {
        $this->sku['value'] = $sku;
    }

    /**
     * Unsets Sku.
     *
     * Used to define the alpha-numberic Stock Keeping Unit associated with the item as it is mapped to
     * your internal product catalogue.
     */
    public function unsetSku(): void
    {
        $this->sku = [];
    }

    /**
     * Returns Isbn.
     *
     * Used to define the International Standard Book Number associated with the book.
     */
    public function getIsbn(): ?string
    {
        if (count($this->isbn) == 0) {
            return null;
        }
        return $this->isbn['value'];
    }

    /**
     * Sets Isbn.
     *
     * Used to define the International Standard Book Number associated with the book.
     *
     * @maps isbn
     */
    public function setIsbn(?string $isbn): void
    {
        $this->isbn['value'] = $isbn;
    }

    /**
     * Unsets Isbn.
     *
     * Used to define the International Standard Book Number associated with the book.
     */
    public function unsetIsbn(): void
    {
        $this->isbn = [];
    }

    /**
     * Returns Brand.
     */
    public function getBrand(): ?string
    {
        if (count($this->brand) == 0) {
            return null;
        }
        return $this->brand['value'];
    }

    /**
     * Sets Brand.
     *
     * @maps brand
     */
    public function setBrand(?string $brand): void
    {
        $this->brand['value'] = $brand;
    }

    /**
     * Unsets Brand.
     */
    public function unsetBrand(): void
    {
        $this->brand = [];
    }

    /**
     * Returns Manufacturer.
     *
     * Used to define the organization that manufactured the item.
     */
    public function getManufacturer(): ?string
    {
        if (count($this->manufacturer) == 0) {
            return null;
        }
        return $this->manufacturer['value'];
    }

    /**
     * Sets Manufacturer.
     *
     * Used to define the organization that manufactured the item.
     *
     * @maps manufacturer
     */
    public function setManufacturer(?string $manufacturer): void
    {
        $this->manufacturer['value'] = $manufacturer;
    }

    /**
     * Unsets Manufacturer.
     *
     * Used to define the organization that manufactured the item.
     */
    public function unsetManufacturer(): void
    {
        $this->manufacturer = [];
    }

    /**
     * Returns Category.
     *
     * Used to define a product category associated with the item.
     */
    public function getCategory(): ?string
    {
        if (count($this->category) == 0) {
            return null;
        }
        return $this->category['value'];
    }

    /**
     * Sets Category.
     *
     * Used to define a product category associated with the item.
     *
     * @maps category
     */
    public function setCategory(?string $category): void
    {
        $this->category['value'] = $category;
    }

    /**
     * Unsets Category.
     *
     * Used to define a product category associated with the item.
     */
    public function unsetCategory(): void
    {
        $this->category = [];
    }

    /**
     * Returns Tags.
     *
     * Used to define a comma-separated list of tags associated with the item.
     */
    public function getTags(): ?string
    {
        if (count($this->tags) == 0) {
            return null;
        }
        return $this->tags['value'];
    }

    /**
     * Sets Tags.
     *
     * Used to define a comma-separated list of tags associated with the item.
     *
     * @maps tags
     */
    public function setTags(?string $tags): void
    {
        $this->tags['value'] = $tags;
    }

    /**
     * Unsets Tags.
     *
     * Used to define a comma-separated list of tags associated with the item.
     */
    public function unsetTags(): void
    {
        $this->tags = [];
    }

    /**
     * Returns Properties.
     *
     * @return CartItemProperty[]
     */
    public function getProperties(): array
    {
        return $this->properties;
    }

    /**
     * Sets Properties.
     *
     * @required
     * @maps properties
     *
     * @param CartItemProperty[] $properties
     */
    public function setProperties(array $properties): void
    {
        $this->properties = $properties;
    }

    /**
     * Returns Color.
     *
     * Used to define the color of the item.
     */
    public function getColor(): ?string
    {
        if (count($this->color) == 0) {
            return null;
        }
        return $this->color['value'];
    }

    /**
     * Sets Color.
     *
     * Used to define the color of the item.
     *
     * @maps color
     */
    public function setColor(?string $color): void
    {
        $this->color['value'] = $color;
    }

    /**
     * Unsets Color.
     *
     * Used to define the color of the item.
     */
    public function unsetColor(): void
    {
        $this->color = [];
    }

    /**
     * Returns Size.
     *
     * Used to define the size of the item.
     */
    public function getSize(): ?string
    {
        if (count($this->size) == 0) {
            return null;
        }
        return $this->size['value'];
    }

    /**
     * Sets Size.
     *
     * Used to define the size of the item.
     *
     * @maps size
     */
    public function setSize(?string $size): void
    {
        $this->size['value'] = $size;
    }

    /**
     * Unsets Size.
     *
     * Used to define the size of the item.
     */
    public function unsetSize(): void
    {
        $this->size = [];
    }

    /**
     * Returns Weight.
     */
    public function getWeight(): ?int
    {
        if (count($this->weight) == 0) {
            return null;
        }
        return $this->weight['value'];
    }

    /**
     * Sets Weight.
     *
     * @maps weight
     */
    public function setWeight(?int $weight): void
    {
        $this->weight['value'] = $weight;
    }

    /**
     * Unsets Weight.
     */
    public function unsetWeight(): void
    {
        $this->weight = [];
    }

    /**
     * Returns Weight Unit.
     */
    public function getWeightUnit(): ?string
    {
        if (count($this->weightUnit) == 0) {
            return null;
        }
        return $this->weightUnit['value'];
    }

    /**
     * Sets Weight Unit.
     *
     * @maps weight_unit
     */
    public function setWeightUnit(?string $weightUnit): void
    {
        $this->weightUnit['value'] = $weightUnit;
    }

    /**
     * Unsets Weight Unit.
     */
    public function unsetWeightUnit(): void
    {
        $this->weightUnit = [];
    }

    /**
     * Returns Image Url.
     *
     * Used to provide a link to the image associated with the item.
     */
    public function getImageUrl(): ?string
    {
        return $this->imageUrl;
    }

    /**
     * Sets Image Url.
     *
     * Used to provide a link to the image associated with the item.
     *
     * @maps image_url
     */
    public function setImageUrl(?string $imageUrl): void
    {
        $this->imageUrl = $imageUrl;
    }

    /**
     * Returns Details Url.
     *
     * Used to provide a link to the item's product page.
     */
    public function getDetailsUrl(): ?string
    {
        return $this->detailsUrl;
    }

    /**
     * Sets Details Url.
     *
     * Used to provide a link to the item's product page.
     *
     * @maps details_url
     */
    public function setDetailsUrl(?string $detailsUrl): void
    {
        $this->detailsUrl = $detailsUrl;
    }

    /**
     * Returns External Inputs.
     */
    public function getExternalInputs(): ?CartItemExternalInputs
    {
        return $this->externalInputs;
    }

    /**
     * Sets External Inputs.
     *
     * @maps external_inputs
     */
    public function setExternalInputs(?CartItemExternalInputs $externalInputs): void
    {
        $this->externalInputs = $externalInputs;
    }

    /**
     * Returns Taxable.
     */
    public function getTaxable(): ?bool
    {
        if (count($this->taxable) == 0) {
            return null;
        }
        return $this->taxable['value'];
    }

    /**
     * Sets Taxable.
     *
     * @maps taxable
     */
    public function setTaxable(?bool $taxable): void
    {
        $this->taxable['value'] = $taxable;
    }

    /**
     * Unsets Taxable.
     */
    public function unsetTaxable(): void
    {
        $this->taxable = [];
    }

    /**
     * Returns Tax Code.
     */
    public function getTaxCode(): ?string
    {
        if (count($this->taxCode) == 0) {
            return null;
        }
        return $this->taxCode['value'];
    }

    /**
     * Sets Tax Code.
     *
     * @maps tax_code
     */
    public function setTaxCode(?string $taxCode): void
    {
        $this->taxCode['value'] = $taxCode;
    }

    /**
     * Unsets Tax Code.
     */
    public function unsetTaxCode(): void
    {
        $this->taxCode = [];
    }

    /**
     * Returns Type.
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     *
     * @maps type
     */
    public function setType(?string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Collections.
     *
     * @return string[]
     */
    public function getCollections(): array
    {
        return $this->collections;
    }

    /**
     * Sets Collections.
     *
     * @required
     * @maps collections
     *
     * @param string[] $collections
     */
    public function setCollections(array $collections): void
    {
        $this->collections = $collections;
    }

    /**
     * Returns Subscription.
     */
    public function getSubscription(): ?Subscription
    {
        return $this->subscription;
    }

    /**
     * Sets Subscription.
     *
     * @maps subscription
     */
    public function setSubscription(?Subscription $subscription): void
    {
        $this->subscription = $subscription;
    }

    /**
     * Returns Source.
     */
    public function getSource(): ?string
    {
        if (count($this->source) == 0) {
            return null;
        }
        return $this->source['value'];
    }

    /**
     * Sets Source.
     *
     * @maps source
     */
    public function setSource(?string $source): void
    {
        $this->source['value'] = $source;
    }

    /**
     * Unsets Source.
     */
    public function unsetSource(): void
    {
        $this->source = [];
    }

    /**
     * Returns Item Group.
     */
    public function getItemGroup(): ?string
    {
        if (count($this->itemGroup) == 0) {
            return null;
        }
        return $this->itemGroup['value'];
    }

    /**
     * Sets Item Group.
     *
     * @maps item_group
     */
    public function setItemGroup(?string $itemGroup): void
    {
        $this->itemGroup['value'] = $itemGroup;
    }

    /**
     * Unsets Item Group.
     */
    public function unsetItemGroup(): void
    {
        $this->itemGroup = [];
    }

    /**
     * Returns Shipment Type.
     */
    public function getShipmentType(): ?string
    {
        return $this->shipmentType;
    }

    /**
     * Sets Shipment Type.
     *
     * @maps shipment_type
     */
    public function setShipmentType(?string $shipmentType): void
    {
        $this->shipmentType = $shipmentType;
    }

    /**
     * Returns Customizations.
     *
     * @return CartItemCustomization[]
     */
    public function getCustomizations(): array
    {
        return $this->customizations;
    }

    /**
     * Sets Customizations.
     *
     * @required
     * @maps customizations
     *
     * @param CartItemCustomization[] $customizations
     */
    public function setCustomizations(array $customizations): void
    {
        $this->customizations = $customizations;
    }

    /**
     * Returns Msrp.
     */
    public function getMsrp(): ?int
    {
        if (count($this->msrp) == 0) {
            return null;
        }
        return $this->msrp['value'];
    }

    /**
     * Sets Msrp.
     *
     * @maps msrp
     */
    public function setMsrp(?int $msrp): void
    {
        $this->msrp['value'] = $msrp;
    }

    /**
     * Unsets Msrp.
     */
    public function unsetMsrp(): void
    {
        $this->msrp = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['reference']           = $this->reference;
        $json['name']                = $this->name;
        if (!empty($this->description)) {
            $json['description']     = $this->description['value'];
        }
        if (!empty($this->options)) {
            $json['options']         = $this->options['value'];
        }
        $json['total_amount']        = $this->totalAmount;
        $json['unit_price']          = $this->unitPrice;
        if (!empty($this->taxAmount)) {
            $json['tax_amount']      = $this->taxAmount['value'];
        }
        $json['quantity']            = $this->quantity;
        if (!empty($this->uom)) {
            $json['uom']             = $this->uom['value'];
        }
        if (!empty($this->upc)) {
            $json['upc']             = $this->upc['value'];
        }
        if (!empty($this->sku)) {
            $json['sku']             = $this->sku['value'];
        }
        if (!empty($this->isbn)) {
            $json['isbn']            = $this->isbn['value'];
        }
        if (!empty($this->brand)) {
            $json['brand']           = $this->brand['value'];
        }
        if (!empty($this->manufacturer)) {
            $json['manufacturer']    = $this->manufacturer['value'];
        }
        if (!empty($this->category)) {
            $json['category']        = $this->category['value'];
        }
        if (!empty($this->tags)) {
            $json['tags']            = $this->tags['value'];
        }
        $json['properties']          = $this->properties;
        if (!empty($this->color)) {
            $json['color']           = $this->color['value'];
        }
        if (!empty($this->size)) {
            $json['size']            = $this->size['value'];
        }
        if (!empty($this->weight)) {
            $json['weight']          = $this->weight['value'];
        }
        if (!empty($this->weightUnit)) {
            $json['weight_unit']     = $this->weightUnit['value'];
        }
        if (isset($this->imageUrl)) {
            $json['image_url']       = $this->imageUrl;
        }
        if (isset($this->detailsUrl)) {
            $json['details_url']     = $this->detailsUrl;
        }
        if (isset($this->externalInputs)) {
            $json['external_inputs'] = $this->externalInputs;
        }
        if (!empty($this->taxable)) {
            $json['taxable']         = $this->taxable['value'];
        }
        if (!empty($this->taxCode)) {
            $json['tax_code']        = $this->taxCode['value'];
        }
        if (isset($this->type)) {
            $json['type']            = $this->type;
        }
        $json['collections']         = $this->collections;
        if (isset($this->subscription)) {
            $json['subscription']    = $this->subscription;
        }
        if (!empty($this->source)) {
            $json['source']          = $this->source['value'];
        }
        if (!empty($this->itemGroup)) {
            $json['item_group']      = $this->itemGroup['value'];
        }
        if (isset($this->shipmentType)) {
            $json['shipment_type']   = $this->shipmentType;
        }
        $json['customizations']      = $this->customizations;
        if (!empty($this->msrp)) {
            $json['msrp']            = $this->msrp['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
