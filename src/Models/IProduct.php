<?php

declare(strict_types=1);

/*
 * BoltAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace BoltAPILib\Models;

use stdClass;

class IProduct implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $boltID;

    /**
     * @var string|null
     */
    private $name;

    /**
     * @var string|null
     */
    private $description;

    /**
     * @var string|null
     */
    private $availability;

    /**
     * @var int|null
     */
    private $availabilityCount;

    /**
     * @var Price[]|null
     */
    private $prices;

    /**
     * @var Multimedia|null
     */
    private $multimedia;

    /**
     * Returns Bolt ID.
     */
    public function getBoltID(): ?string
    {
        return $this->boltID;
    }

    /**
     * Sets Bolt ID.
     *
     * @maps BoltID
     */
    public function setBoltID(?string $boltID): void
    {
        $this->boltID = $boltID;
    }

    /**
     * Returns Name.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     *
     * @maps Name
     */
    public function setName(?string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Description.
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * Sets Description.
     *
     * @maps Description
     */
    public function setDescription(?string $description): void
    {
        $this->description = $description;
    }

    /**
     * Returns Availability.
     */
    public function getAvailability(): ?string
    {
        return $this->availability;
    }

    /**
     * Sets Availability.
     *
     * @maps Availability
     */
    public function setAvailability(?string $availability): void
    {
        $this->availability = $availability;
    }

    /**
     * Returns Availability Count.
     */
    public function getAvailabilityCount(): ?int
    {
        return $this->availabilityCount;
    }

    /**
     * Sets Availability Count.
     *
     * @maps AvailabilityCount
     */
    public function setAvailabilityCount(?int $availabilityCount): void
    {
        $this->availabilityCount = $availabilityCount;
    }

    /**
     * Returns Prices.
     *
     * @return Price[]|null
     */
    public function getPrices(): ?array
    {
        return $this->prices;
    }

    /**
     * Sets Prices.
     *
     * @maps Prices
     *
     * @param Price[]|null $prices
     */
    public function setPrices(?array $prices): void
    {
        $this->prices = $prices;
    }

    /**
     * Returns Multimedia.
     */
    public function getMultimedia(): ?Multimedia
    {
        return $this->multimedia;
    }

    /**
     * Sets Multimedia.
     *
     * @maps Multimedia
     */
    public function setMultimedia(?Multimedia $multimedia): void
    {
        $this->multimedia = $multimedia;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->boltID)) {
            $json['BoltID']            = $this->boltID;
        }
        if (isset($this->name)) {
            $json['Name']              = $this->name;
        }
        if (isset($this->description)) {
            $json['Description']       = $this->description;
        }
        if (isset($this->availability)) {
            $json['Availability']      = $this->availability;
        }
        if (isset($this->availabilityCount)) {
            $json['AvailabilityCount'] = $this->availabilityCount;
        }
        if (isset($this->prices)) {
            $json['Prices']            = $this->prices;
        }
        if (isset($this->multimedia)) {
            $json['Multimedia']        = $this->multimedia;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
