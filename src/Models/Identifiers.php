<?php

declare(strict_types=1);

/*
 * BoltAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace BoltAPILib\Models;

use stdClass;

class Identifiers implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $merchantProductID;

    /**
     * @var array
     */
    private $sKU = [];

    /**
     * Returns Merchant Product ID.
     */
    public function getMerchantProductID(): ?string
    {
        return $this->merchantProductID;
    }

    /**
     * Sets Merchant Product ID.
     *
     * @maps MerchantProductID
     */
    public function setMerchantProductID(?string $merchantProductID): void
    {
        $this->merchantProductID = $merchantProductID;
    }

    /**
     * Returns S KU.
     *
     * Used to define an alpha-numberic Stock Keeping Unit associated with the item as it is mapped to your
     * internal product catalogue.
     */
    public function getSKU(): ?string
    {
        if (count($this->sKU) == 0) {
            return null;
        }
        return $this->sKU['value'];
    }

    /**
     * Sets S KU.
     *
     * Used to define an alpha-numberic Stock Keeping Unit associated with the item as it is mapped to your
     * internal product catalogue.
     *
     * @maps SKU
     */
    public function setSKU(?string $sKU): void
    {
        $this->sKU['value'] = $sKU;
    }

    /**
     * Unsets S KU.
     *
     * Used to define an alpha-numberic Stock Keeping Unit associated with the item as it is mapped to your
     * internal product catalogue.
     */
    public function unsetSKU(): void
    {
        $this->sKU = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->merchantProductID)) {
            $json['MerchantProductID'] = $this->merchantProductID;
        }
        if (!empty($this->sKU)) {
            $json['SKU']               = $this->sKU['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
