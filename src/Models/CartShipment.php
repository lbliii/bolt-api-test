<?php

declare(strict_types=1);

/*
 * BoltAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace BoltAPILib\Models;

use BoltAPILib\Utils\DateTimeHelper;
use stdClass;

class CartShipment implements \JsonSerializable
{
    /**
     * @var array
     */
    private $shippingAddressId = [];

    /**
     * @var Address|null
     */
    private $shippingAddress;

    /**
     * @var int|null
     */
    private $totalWeight;

    /**
     * @var string|null
     */
    private $totalWeightUnit;

    /**
     * @var string|null
     */
    private $shippingMethod;

    /**
     * @var string|null
     */
    private $carrier;

    /**
     * @var string|null
     */
    private $reference;

    /**
     * @var string|null
     */
    private $signature;

    /**
     * @var string|null
     */
    private $service;

    /**
     * @var bool|null
     */
    private $expedited;

    /**
     * @var int|null
     */
    private $cost;

    /**
     * @var int|null
     */
    private $taxAmount;

    /**
     * @var string|null
     */
    private $packageType;

    /**
     * @var int|null
     */
    private $packageWidth;

    /**
     * @var int|null
     */
    private $packageHeight;

    /**
     * @var int|null
     */
    private $packageDepth;

    /**
     * @var string|null
     */
    private $packageDimensionUnit;

    /**
     * @var int|null
     */
    private $packageWeight;

    /**
     * @var string|null
     */
    private $packageWeightUnit;

    /**
     * @var string|null
     */
    private $taxCode;

    /**
     * @var \DateTime|null
     */
    private $estimatedDeliveryDate;

    /**
     * @var string|null
     */
    private $type;

    /**
     * @var bool|null
     */
    private $discountedByMembership;

    /**
     * Returns Shipping Address Id.
     *
     * The unique Bolt ID associated with the shopper's shipping address. Shoppers can save many shipping
     * addresses to their account.  Must be `null` if this address has never been saved to a Bolt account.
     */
    public function getShippingAddressId(): ?string
    {
        if (count($this->shippingAddressId) == 0) {
            return null;
        }
        return $this->shippingAddressId['value'];
    }

    /**
     * Sets Shipping Address Id.
     *
     * The unique Bolt ID associated with the shopper's shipping address. Shoppers can save many shipping
     * addresses to their account.  Must be `null` if this address has never been saved to a Bolt account.
     *
     * @maps shipping_address_id
     */
    public function setShippingAddressId(?string $shippingAddressId): void
    {
        $this->shippingAddressId['value'] = $shippingAddressId;
    }

    /**
     * Unsets Shipping Address Id.
     *
     * The unique Bolt ID associated with the shopper's shipping address. Shoppers can save many shipping
     * addresses to their account.  Must be `null` if this address has never been saved to a Bolt account.
     */
    public function unsetShippingAddressId(): void
    {
        $this->shippingAddressId = [];
    }

    /**
     * Returns Shipping Address.
     *
     * The Address object is used for billing, shipping, and physical store address use cases.
     */
    public function getShippingAddress(): ?Address
    {
        return $this->shippingAddress;
    }

    /**
     * Sets Shipping Address.
     *
     * The Address object is used for billing, shipping, and physical store address use cases.
     *
     * @maps shipping_address
     */
    public function setShippingAddress(?Address $shippingAddress): void
    {
        $this->shippingAddress = $shippingAddress;
    }

    /**
     * Returns Total Weight.
     *
     * Used to define the total weight of the shipment and all of its items.
     */
    public function getTotalWeight(): ?int
    {
        return $this->totalWeight;
    }

    /**
     * Sets Total Weight.
     *
     * Used to define the total weight of the shipment and all of its items.
     *
     * @maps total_weight
     */
    public function setTotalWeight(?int $totalWeight): void
    {
        $this->totalWeight = $totalWeight;
    }

    /**
     * Returns Total Weight Unit.
     *
     * Used to define the unit used to measure the weight of the shipment.
     */
    public function getTotalWeightUnit(): ?string
    {
        return $this->totalWeightUnit;
    }

    /**
     * Sets Total Weight Unit.
     *
     * Used to define the unit used to measure the weight of the shipment.
     *
     * @maps total_weight_unit
     */
    public function setTotalWeightUnit(?string $totalWeightUnit): void
    {
        $this->totalWeightUnit = $totalWeightUnit;
    }

    /**
     * Returns Shipping Method.
     *
     * Used to determine how the shipment is delivered.
     */
    public function getShippingMethod(): ?string
    {
        return $this->shippingMethod;
    }

    /**
     * Sets Shipping Method.
     *
     * Used to determine how the shipment is delivered.
     *
     * @maps shipping_method
     */
    public function setShippingMethod(?string $shippingMethod): void
    {
        $this->shippingMethod = $shippingMethod;
    }

    /**
     * Returns Carrier.
     *
     * Used to define the carrier delivering the shipment.
     */
    public function getCarrier(): ?string
    {
        return $this->carrier;
    }

    /**
     * Sets Carrier.
     *
     * Used to define the carrier delivering the shipment.
     *
     * @maps carrier
     */
    public function setCarrier(?string $carrier): void
    {
        $this->carrier = $carrier;
    }

    /**
     * Returns Reference.
     */
    public function getReference(): ?string
    {
        return $this->reference;
    }

    /**
     * Sets Reference.
     *
     * @maps reference
     */
    public function setReference(?string $reference): void
    {
        $this->reference = $reference;
    }

    /**
     * Returns Signature.
     */
    public function getSignature(): ?string
    {
        return $this->signature;
    }

    /**
     * Sets Signature.
     *
     * @maps signature
     */
    public function setSignature(?string $signature): void
    {
        $this->signature = $signature;
    }

    /**
     * Returns Service.
     */
    public function getService(): ?string
    {
        return $this->service;
    }

    /**
     * Sets Service.
     *
     * @maps service
     */
    public function setService(?string $service): void
    {
        $this->service = $service;
    }

    /**
     * Returns Expedited.
     */
    public function getExpedited(): ?bool
    {
        return $this->expedited;
    }

    /**
     * Sets Expedited.
     *
     * @maps expedited
     */
    public function setExpedited(?bool $expedited): void
    {
        $this->expedited = $expedited;
    }

    /**
     * Returns Cost.
     */
    public function getCost(): ?int
    {
        return $this->cost;
    }

    /**
     * Sets Cost.
     *
     * @maps cost
     */
    public function setCost(?int $cost): void
    {
        $this->cost = $cost;
    }

    /**
     * Returns Tax Amount.
     *
     * The tax amount for the associated shipping method.
     */
    public function getTaxAmount(): ?int
    {
        return $this->taxAmount;
    }

    /**
     * Sets Tax Amount.
     *
     * The tax amount for the associated shipping method.
     *
     * @maps tax_amount
     */
    public function setTaxAmount(?int $taxAmount): void
    {
        $this->taxAmount = $taxAmount;
    }

    /**
     * Returns Package Type.
     */
    public function getPackageType(): ?string
    {
        return $this->packageType;
    }

    /**
     * Sets Package Type.
     *
     * @maps package_type
     */
    public function setPackageType(?string $packageType): void
    {
        $this->packageType = $packageType;
    }

    /**
     * Returns Package Width.
     */
    public function getPackageWidth(): ?int
    {
        return $this->packageWidth;
    }

    /**
     * Sets Package Width.
     *
     * @maps package_width
     */
    public function setPackageWidth(?int $packageWidth): void
    {
        $this->packageWidth = $packageWidth;
    }

    /**
     * Returns Package Height.
     */
    public function getPackageHeight(): ?int
    {
        return $this->packageHeight;
    }

    /**
     * Sets Package Height.
     *
     * @maps package_height
     */
    public function setPackageHeight(?int $packageHeight): void
    {
        $this->packageHeight = $packageHeight;
    }

    /**
     * Returns Package Depth.
     */
    public function getPackageDepth(): ?int
    {
        return $this->packageDepth;
    }

    /**
     * Sets Package Depth.
     *
     * @maps package_depth
     */
    public function setPackageDepth(?int $packageDepth): void
    {
        $this->packageDepth = $packageDepth;
    }

    /**
     * Returns Package Dimension Unit.
     */
    public function getPackageDimensionUnit(): ?string
    {
        return $this->packageDimensionUnit;
    }

    /**
     * Sets Package Dimension Unit.
     *
     * @maps package_dimension_unit
     */
    public function setPackageDimensionUnit(?string $packageDimensionUnit): void
    {
        $this->packageDimensionUnit = $packageDimensionUnit;
    }

    /**
     * Returns Package Weight.
     */
    public function getPackageWeight(): ?int
    {
        return $this->packageWeight;
    }

    /**
     * Sets Package Weight.
     *
     * @maps package_weight
     */
    public function setPackageWeight(?int $packageWeight): void
    {
        $this->packageWeight = $packageWeight;
    }

    /**
     * Returns Package Weight Unit.
     *
     * Used to define the unit of measure for the shipment's weight.
     */
    public function getPackageWeightUnit(): ?string
    {
        return $this->packageWeightUnit;
    }

    /**
     * Sets Package Weight Unit.
     *
     * Used to define the unit of measure for the shipment's weight.
     *
     * @maps package_weight_unit
     */
    public function setPackageWeightUnit(?string $packageWeightUnit): void
    {
        $this->packageWeightUnit = $packageWeightUnit;
    }

    /**
     * Returns Tax Code.
     */
    public function getTaxCode(): ?string
    {
        return $this->taxCode;
    }

    /**
     * Sets Tax Code.
     *
     * @maps tax_code
     */
    public function setTaxCode(?string $taxCode): void
    {
        $this->taxCode = $taxCode;
    }

    /**
     * Returns Estimated Delivery Date.
     */
    public function getEstimatedDeliveryDate(): ?\DateTime
    {
        return $this->estimatedDeliveryDate;
    }

    /**
     * Sets Estimated Delivery Date.
     *
     * @maps estimated_delivery_date
     * @factory \BoltAPILib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setEstimatedDeliveryDate(?\DateTime $estimatedDeliveryDate): void
    {
        $this->estimatedDeliveryDate = $estimatedDeliveryDate;
    }

    /**
     * Returns Type.
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     *
     * @maps type
     */
    public function setType(?string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Discounted by Membership.
     */
    public function getDiscountedByMembership(): ?bool
    {
        return $this->discountedByMembership;
    }

    /**
     * Sets Discounted by Membership.
     *
     * @maps discounted_by_membership
     */
    public function setDiscountedByMembership(?bool $discountedByMembership): void
    {
        $this->discountedByMembership = $discountedByMembership;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->shippingAddressId)) {
            $json['shipping_address_id']      = $this->shippingAddressId['value'];
        }
        if (isset($this->shippingAddress)) {
            $json['shipping_address']         = $this->shippingAddress;
        }
        if (isset($this->totalWeight)) {
            $json['total_weight']             = $this->totalWeight;
        }
        if (isset($this->totalWeightUnit)) {
            $json['total_weight_unit']        = $this->totalWeightUnit;
        }
        if (isset($this->shippingMethod)) {
            $json['shipping_method']          = $this->shippingMethod;
        }
        if (isset($this->carrier)) {
            $json['carrier']                  = $this->carrier;
        }
        if (isset($this->reference)) {
            $json['reference']                = $this->reference;
        }
        if (isset($this->signature)) {
            $json['signature']                = $this->signature;
        }
        if (isset($this->service)) {
            $json['service']                  = $this->service;
        }
        if (isset($this->expedited)) {
            $json['expedited']                = $this->expedited;
        }
        if (isset($this->cost)) {
            $json['cost']                     = $this->cost;
        }
        if (isset($this->taxAmount)) {
            $json['tax_amount']               = $this->taxAmount;
        }
        if (isset($this->packageType)) {
            $json['package_type']             = $this->packageType;
        }
        if (isset($this->packageWidth)) {
            $json['package_width']            = $this->packageWidth;
        }
        if (isset($this->packageHeight)) {
            $json['package_height']           = $this->packageHeight;
        }
        if (isset($this->packageDepth)) {
            $json['package_depth']            = $this->packageDepth;
        }
        if (isset($this->packageDimensionUnit)) {
            $json['package_dimension_unit']   = $this->packageDimensionUnit;
        }
        if (isset($this->packageWeight)) {
            $json['package_weight']           = $this->packageWeight;
        }
        if (isset($this->packageWeightUnit)) {
            $json['package_weight_unit']      = $this->packageWeightUnit;
        }
        if (isset($this->taxCode)) {
            $json['tax_code']                 = $this->taxCode;
        }
        if (isset($this->estimatedDeliveryDate)) {
            $json['estimated_delivery_date']  = DateTimeHelper::toRfc3339DateTime($this->estimatedDeliveryDate);
        }
        if (isset($this->type)) {
            $json['type']                     = $this->type;
        }
        if (isset($this->discountedByMembership)) {
            $json['discounted_by_membership'] = $this->discountedByMembership;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
