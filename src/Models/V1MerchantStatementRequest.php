<?php

declare(strict_types=1);

/*
 * BoltAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace BoltAPILib\Models;

use stdClass;

class V1MerchantStatementRequest implements \JsonSerializable
{
    /**
     * @var string
     */
    private $type;

    /**
     * @var string
     */
    private $fileType;

    /**
     * @var int
     */
    private $date;

    /**
     * @param string $type
     * @param int $date
     */
    public function __construct(string $type, int $date)
    {
        $this->type = $type;
        $this->date = $date;
    }

    /**
     * Returns Type.
     *
     * The type of statement. The type is prepended with a prefix containing the frequency of the statement.
     * The prefix will be either daily or monthly. Transaction statements will contain all transactional
     * event entries. Funding statements contain only funding transactional event entries.
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     *
     * The type of statement. The type is prepended with a prefix containing the frequency of the statement.
     * The prefix will be either daily or monthly. Transaction statements will contain all transactional
     * event entries. Funding statements contain only funding transactional event entries.
     *
     * @required
     * @maps type
     */
    public function setType(string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns File Type.
     *
     * This is the type of the file. Currently, Bolt only supports CSV statements.
     */
    public function getFileType(): string
    {
        return $this->fileType;
    }

    /**
     * Sets File Type.
     *
     * This is the type of the file. Currently, Bolt only supports CSV statements.
     *
     * @maps file_type
     */
    public function setFileType(string $fileType): void
    {
        $this->fileType = $fileType;
    }

    /**
     * Returns Date.
     *
     * This is the date of the statement, in milliseconds since the Unix epoch time.
     */
    public function getDate(): int
    {
        return $this->date;
    }

    /**
     * Sets Date.
     *
     * This is the date of the statement, in milliseconds since the Unix epoch time.
     *
     * @required
     * @maps date
     */
    public function setDate(int $date): void
    {
        $this->date = $date;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['type']      = $this->type;
        $json['file_type'] = $this->fileType;
        $json['date']      = $this->date;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
