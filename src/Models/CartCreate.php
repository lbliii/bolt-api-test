<?php

declare(strict_types=1);

/*
 * BoltAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace BoltAPILib\Models;

use stdClass;

class CartCreate implements \JsonSerializable
{
    /**
     * @var int
     */
    private $totalAmount;

    /**
     * @var CartItem[]
     */
    private $items;

    /**
     * @var int|null
     */
    private $taxAmount;

    /**
     * @var array
     */
    private $billingAddressId = [];

    /**
     * @var Address|null
     */
    private $billingAddress;

    /**
     * @var CartShipment[]
     */
    private $shipments;

    /**
     * @var InStoreCartShipment[]
     */
    private $inStoreCartShipments;

    /**
     * @var CartDiscount[]
     */
    private $discounts;

    /**
     * @var string
     */
    private $discountCode;

    /**
     * @var string|null
     */
    private $discountSource;

    /**
     * @var string
     */
    private $currency;

    /**
     * @var string|null
     */
    private $orderDescription;

    /**
     * @var string|null
     */
    private $orderReference;

    /**
     * @var string|null
     */
    private $transactionReference;

    /**
     * @var string|null
     */
    private $cartUrl;

    /**
     * @var string|null
     */
    private $displayId;

    /**
     * @var bool
     */
    private $isShopifyHostedCheckout;

    /**
     * @var array<string,string>
     */
    private $metadata;

    /**
     * @param int $totalAmount
     * @param CartItem[] $items
     * @param CartShipment[] $shipments
     * @param InStoreCartShipment[] $inStoreCartShipments
     * @param CartDiscount[] $discounts
     * @param string $discountCode
     * @param string $currency
     * @param bool $isShopifyHostedCheckout
     * @param array<string,string> $metadata
     */
    public function __construct(
        int $totalAmount,
        array $items,
        array $shipments,
        array $inStoreCartShipments,
        array $discounts,
        string $discountCode,
        string $currency,
        bool $isShopifyHostedCheckout,
        array $metadata
    ) {
        $this->totalAmount = $totalAmount;
        $this->items = $items;
        $this->shipments = $shipments;
        $this->inStoreCartShipments = $inStoreCartShipments;
        $this->discounts = $discounts;
        $this->discountCode = $discountCode;
        $this->currency = $currency;
        $this->isShopifyHostedCheckout = $isShopifyHostedCheckout;
        $this->metadata = $metadata;
    }

    /**
     * Returns Total Amount.
     *
     * The total amount, in cents, of the cart including its items and taxes if applicable. This total must
     * match the sum of all other amounts.
     */
    public function getTotalAmount(): int
    {
        return $this->totalAmount;
    }

    /**
     * Sets Total Amount.
     *
     * The total amount, in cents, of the cart including its items and taxes if applicable. This total must
     * match the sum of all other amounts.
     *
     * @required
     * @maps total_amount
     */
    public function setTotalAmount(int $totalAmount): void
    {
        $this->totalAmount = $totalAmount;
    }

    /**
     * Returns Items.
     *
     * The list of items associated with the cart.
     *
     * @return CartItem[]
     */
    public function getItems(): array
    {
        return $this->items;
    }

    /**
     * Sets Items.
     *
     * The list of items associated with the cart.
     *
     * @required
     * @maps items
     *
     * @param CartItem[] $items
     */
    public function setItems(array $items): void
    {
        $this->items = $items;
    }

    /**
     * Returns Tax Amount.
     *
     * The total tax amount for all of the items associated with the cart.
     */
    public function getTaxAmount(): ?int
    {
        return $this->taxAmount;
    }

    /**
     * Sets Tax Amount.
     *
     * The total tax amount for all of the items associated with the cart.
     *
     * @maps tax_amount
     */
    public function setTaxAmount(?int $taxAmount): void
    {
        $this->taxAmount = $taxAmount;
    }

    /**
     * Returns Billing Address Id.
     *
     * The unique Bolt ID associated with the billing address. Must be `null` if this address has never
     * been saved to a Bolt account.
     */
    public function getBillingAddressId(): ?string
    {
        if (count($this->billingAddressId) == 0) {
            return null;
        }
        return $this->billingAddressId['value'];
    }

    /**
     * Sets Billing Address Id.
     *
     * The unique Bolt ID associated with the billing address. Must be `null` if this address has never
     * been saved to a Bolt account.
     *
     * @maps billing_address_id
     */
    public function setBillingAddressId(?string $billingAddressId): void
    {
        $this->billingAddressId['value'] = $billingAddressId;
    }

    /**
     * Unsets Billing Address Id.
     *
     * The unique Bolt ID associated with the billing address. Must be `null` if this address has never
     * been saved to a Bolt account.
     */
    public function unsetBillingAddressId(): void
    {
        $this->billingAddressId = [];
    }

    /**
     * Returns Billing Address.
     *
     * The Address object is used for billing, shipping, and physical store address use cases.
     */
    public function getBillingAddress(): ?Address
    {
        return $this->billingAddress;
    }

    /**
     * Sets Billing Address.
     *
     * The Address object is used for billing, shipping, and physical store address use cases.
     *
     * @maps billing_address
     */
    public function setBillingAddress(?Address $billingAddress): void
    {
        $this->billingAddress = $billingAddress;
    }

    /**
     * Returns Shipments.
     *
     * @return CartShipment[]
     */
    public function getShipments(): array
    {
        return $this->shipments;
    }

    /**
     * Sets Shipments.
     *
     * @required
     * @maps shipments
     *
     * @param CartShipment[] $shipments
     */
    public function setShipments(array $shipments): void
    {
        $this->shipments = $shipments;
    }

    /**
     * Returns In Store Cart Shipments.
     *
     * @return InStoreCartShipment[]
     */
    public function getInStoreCartShipments(): array
    {
        return $this->inStoreCartShipments;
    }

    /**
     * Sets In Store Cart Shipments.
     *
     * @required
     * @maps in_store_cart_shipments
     *
     * @param InStoreCartShipment[] $inStoreCartShipments
     */
    public function setInStoreCartShipments(array $inStoreCartShipments): void
    {
        $this->inStoreCartShipments = $inStoreCartShipments;
    }

    /**
     * Returns Discounts.
     *
     * @return CartDiscount[]
     */
    public function getDiscounts(): array
    {
        return $this->discounts;
    }

    /**
     * Sets Discounts.
     *
     * @required
     * @maps discounts
     *
     * @param CartDiscount[] $discounts
     */
    public function setDiscounts(array $discounts): void
    {
        $this->discounts = $discounts;
    }

    /**
     * Returns Discount Code.
     *
     * The discount code provided.
     */
    public function getDiscountCode(): string
    {
        return $this->discountCode;
    }

    /**
     * Sets Discount Code.
     *
     * The discount code provided.
     *
     * @required
     * @maps discount_code
     */
    public function setDiscountCode(string $discountCode): void
    {
        $this->discountCode = $discountCode;
    }

    /**
     * Returns Discount Source.
     *
     * Used to define the source of the discount applied.
     */
    public function getDiscountSource(): ?string
    {
        return $this->discountSource;
    }

    /**
     * Sets Discount Source.
     *
     * Used to define the source of the discount applied.
     *
     * @maps discount_source
     */
    public function setDiscountSource(?string $discountSource): void
    {
        $this->discountSource = $discountSource;
    }

    /**
     * Returns Currency.
     */
    public function getCurrency(): string
    {
        return $this->currency;
    }

    /**
     * Sets Currency.
     *
     * @required
     * @maps currency
     */
    public function setCurrency(string $currency): void
    {
        $this->currency = $currency;
    }

    /**
     * Returns Order Description.
     *
     * Used optionally to pass additional information like order numbers or other IDs as needed.
     */
    public function getOrderDescription(): ?string
    {
        return $this->orderDescription;
    }

    /**
     * Sets Order Description.
     *
     * Used optionally to pass additional information like order numbers or other IDs as needed.
     *
     * @maps order_description
     */
    public function setOrderDescription(?string $orderDescription): void
    {
        $this->orderDescription = $orderDescription;
    }

    /**
     * Returns Order Reference.
     *
     * The Bolt reference ID for a given order. This ID can be associated with many transaction references.
     */
    public function getOrderReference(): ?string
    {
        return $this->orderReference;
    }

    /**
     * Sets Order Reference.
     *
     * The Bolt reference ID for a given order. This ID can be associated with many transaction references.
     *
     * @maps order_reference
     */
    public function setOrderReference(?string $orderReference): void
    {
        $this->orderReference = $orderReference;
    }

    /**
     * Returns Transaction Reference.
     *
     * The 12 digit reference ID associated to a given transaction webhook for an order.
     */
    public function getTransactionReference(): ?string
    {
        return $this->transactionReference;
    }

    /**
     * Sets Transaction Reference.
     *
     * The 12 digit reference ID associated to a given transaction webhook for an order.
     *
     * @maps transaction_reference
     */
    public function setTransactionReference(?string $transactionReference): void
    {
        $this->transactionReference = $transactionReference;
    }

    /**
     * Returns Cart Url.
     *
     * Used to provide a link to the cart ID.
     */
    public function getCartUrl(): ?string
    {
        return $this->cartUrl;
    }

    /**
     * Sets Cart Url.
     *
     * Used to provide a link to the cart ID.
     *
     * @maps cart_url
     */
    public function setCartUrl(?string $cartUrl): void
    {
        $this->cartUrl = $cartUrl;
    }

    /**
     * Returns Display Id.
     */
    public function getDisplayId(): ?string
    {
        return $this->displayId;
    }

    /**
     * Sets Display Id.
     *
     * @maps display_id
     */
    public function setDisplayId(?string $displayId): void
    {
        $this->displayId = $displayId;
    }

    /**
     * Returns Is Shopify Hosted Checkout.
     */
    public function getIsShopifyHostedCheckout(): bool
    {
        return $this->isShopifyHostedCheckout;
    }

    /**
     * Sets Is Shopify Hosted Checkout.
     *
     * @required
     * @maps is_shopify_hosted_checkout
     */
    public function setIsShopifyHostedCheckout(bool $isShopifyHostedCheckout): void
    {
        $this->isShopifyHostedCheckout = $isShopifyHostedCheckout;
    }

    /**
     * Returns Metadata.
     *
     * @return array<string,string>
     */
    public function getMetadata(): array
    {
        return $this->metadata;
    }

    /**
     * Sets Metadata.
     *
     * @required
     * @maps metadata
     *
     * @param array<string,string> $metadata
     */
    public function setMetadata(array $metadata): void
    {
        $this->metadata = $metadata;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['total_amount']               = $this->totalAmount;
        $json['items']                      = $this->items;
        if (isset($this->taxAmount)) {
            $json['tax_amount']             = $this->taxAmount;
        }
        if (!empty($this->billingAddressId)) {
            $json['billing_address_id']     = $this->billingAddressId['value'];
        }
        if (isset($this->billingAddress)) {
            $json['billing_address']        = $this->billingAddress;
        }
        $json['shipments']                  = $this->shipments;
        $json['in_store_cart_shipments']    = $this->inStoreCartShipments;
        $json['discounts']                  = $this->discounts;
        $json['discount_code']              = $this->discountCode;
        if (isset($this->discountSource)) {
            $json['discount_source']        = $this->discountSource;
        }
        $json['currency']                   = $this->currency;
        if (isset($this->orderDescription)) {
            $json['order_description']      = $this->orderDescription;
        }
        if (isset($this->orderReference)) {
            $json['order_reference']        = $this->orderReference;
        }
        if (isset($this->transactionReference)) {
            $json['transaction_reference']  = $this->transactionReference;
        }
        if (isset($this->cartUrl)) {
            $json['cart_url']               = $this->cartUrl;
        }
        if (isset($this->displayId)) {
            $json['display_id']             = $this->displayId;
        }
        $json['is_shopify_hosted_checkout'] = $this->isShopifyHostedCheckout;
        $json['metadata']                   = $this->metadata;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
