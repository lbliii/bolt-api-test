<?php

declare(strict_types=1);

/*
 * BoltAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace BoltAPILib\Models;

use stdClass;

class MerchantUserView implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $merchantUserId;

    /**
     * @var string|null
     */
    private $signature;

    /**
     * @var string|null
     */
    private $nonce;

    /**
     * Returns Merchant User Id.
     */
    public function getMerchantUserId(): ?string
    {
        return $this->merchantUserId;
    }

    /**
     * Sets Merchant User Id.
     *
     * @maps merchant_user_id
     */
    public function setMerchantUserId(?string $merchantUserId): void
    {
        $this->merchantUserId = $merchantUserId;
    }

    /**
     * Returns Signature.
     */
    public function getSignature(): ?string
    {
        return $this->signature;
    }

    /**
     * Sets Signature.
     *
     * @maps signature
     */
    public function setSignature(?string $signature): void
    {
        $this->signature = $signature;
    }

    /**
     * Returns Nonce.
     */
    public function getNonce(): ?string
    {
        return $this->nonce;
    }

    /**
     * Sets Nonce.
     *
     * @maps nonce
     */
    public function setNonce(?string $nonce): void
    {
        $this->nonce = $nonce;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->merchantUserId)) {
            $json['merchant_user_id'] = $this->merchantUserId;
        }
        if (isset($this->signature)) {
            $json['signature']        = $this->signature;
        }
        if (isset($this->nonce)) {
            $json['nonce']            = $this->nonce;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
