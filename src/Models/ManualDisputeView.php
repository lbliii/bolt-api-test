<?php

declare(strict_types=1);

/*
 * BoltAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace BoltAPILib\Models;

use stdClass;

class ManualDisputeView implements \JsonSerializable
{
    /**
     * @var int|null
     */
    private $amount;

    /**
     * @var string|null
     */
    private $currency;

    /**
     * @var string|null
     */
    private $reason;

    /**
     * @var string|null
     */
    private $disputeEvidence;

    /**
     * @var string|null
     */
    private $disputeLink;

    /**
     * @var string|null
     */
    private $deliveryEvidence;

    /**
     * @var string|null
     */
    private $deliveryLink;

    /**
     * @var string[]|null
     */
    private $otherEvidence;

    /**
     * @var string[]|null
     */
    private $otherLink;

    /**
     * @var string|null
     */
    private $status;

    /**
     * Returns Amount.
     */
    public function getAmount(): ?int
    {
        return $this->amount;
    }

    /**
     * Sets Amount.
     *
     * @maps amount
     */
    public function setAmount(?int $amount): void
    {
        $this->amount = $amount;
    }

    /**
     * Returns Currency.
     */
    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    /**
     * Sets Currency.
     *
     * @maps currency
     */
    public function setCurrency(?string $currency): void
    {
        $this->currency = $currency;
    }

    /**
     * Returns Reason.
     */
    public function getReason(): ?string
    {
        return $this->reason;
    }

    /**
     * Sets Reason.
     *
     * @maps reason
     */
    public function setReason(?string $reason): void
    {
        $this->reason = $reason;
    }

    /**
     * Returns Dispute Evidence.
     */
    public function getDisputeEvidence(): ?string
    {
        return $this->disputeEvidence;
    }

    /**
     * Sets Dispute Evidence.
     *
     * @maps dispute_evidence
     */
    public function setDisputeEvidence(?string $disputeEvidence): void
    {
        $this->disputeEvidence = $disputeEvidence;
    }

    /**
     * Returns Dispute Link.
     */
    public function getDisputeLink(): ?string
    {
        return $this->disputeLink;
    }

    /**
     * Sets Dispute Link.
     *
     * @maps dispute_link
     */
    public function setDisputeLink(?string $disputeLink): void
    {
        $this->disputeLink = $disputeLink;
    }

    /**
     * Returns Delivery Evidence.
     */
    public function getDeliveryEvidence(): ?string
    {
        return $this->deliveryEvidence;
    }

    /**
     * Sets Delivery Evidence.
     *
     * @maps delivery_evidence
     */
    public function setDeliveryEvidence(?string $deliveryEvidence): void
    {
        $this->deliveryEvidence = $deliveryEvidence;
    }

    /**
     * Returns Delivery Link.
     */
    public function getDeliveryLink(): ?string
    {
        return $this->deliveryLink;
    }

    /**
     * Sets Delivery Link.
     *
     * @maps delivery_link
     */
    public function setDeliveryLink(?string $deliveryLink): void
    {
        $this->deliveryLink = $deliveryLink;
    }

    /**
     * Returns Other Evidence.
     *
     * @return string[]|null
     */
    public function getOtherEvidence(): ?array
    {
        return $this->otherEvidence;
    }

    /**
     * Sets Other Evidence.
     *
     * @maps other_evidence
     *
     * @param string[]|null $otherEvidence
     */
    public function setOtherEvidence(?array $otherEvidence): void
    {
        $this->otherEvidence = $otherEvidence;
    }

    /**
     * Returns Other Link.
     *
     * @return string[]|null
     */
    public function getOtherLink(): ?array
    {
        return $this->otherLink;
    }

    /**
     * Sets Other Link.
     *
     * @maps other_link
     *
     * @param string[]|null $otherLink
     */
    public function setOtherLink(?array $otherLink): void
    {
        $this->otherLink = $otherLink;
    }

    /**
     * Returns Status.
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Sets Status.
     *
     * @maps status
     */
    public function setStatus(?string $status): void
    {
        $this->status = $status;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->amount)) {
            $json['amount']            = $this->amount;
        }
        if (isset($this->currency)) {
            $json['currency']          = $this->currency;
        }
        if (isset($this->reason)) {
            $json['reason']            = $this->reason;
        }
        if (isset($this->disputeEvidence)) {
            $json['dispute_evidence']  = $this->disputeEvidence;
        }
        if (isset($this->disputeLink)) {
            $json['dispute_link']      = $this->disputeLink;
        }
        if (isset($this->deliveryEvidence)) {
            $json['delivery_evidence'] = $this->deliveryEvidence;
        }
        if (isset($this->deliveryLink)) {
            $json['delivery_link']     = $this->deliveryLink;
        }
        if (isset($this->otherEvidence)) {
            $json['other_evidence']    = $this->otherEvidence;
        }
        if (isset($this->otherLink)) {
            $json['other_link']        = $this->otherLink;
        }
        if (isset($this->status)) {
            $json['status']            = $this->status;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
