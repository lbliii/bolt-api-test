<?php

declare(strict_types=1);

/*
 * BoltAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace BoltAPILib\Models;

use stdClass;

/**
 * The object containing key lookup IDs associated with the shopper's account, such as the unqiue
 * email address and phone number.
 */
class UserIdentifier implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $email;

    /**
     * @var string|null
     */
    private $phone;

    /**
     * @var string|null
     */
    private $emailId;

    /**
     * @var string|null
     */
    private $phoneId;

    /**
     * @var string|null
     */
    private $artifact;

    /**
     * Returns Email.
     *
     * The Shopper's email address that is used as a unique ID for the account. This email can be used to
     * detect an account using the `/v1/account/exists` endpoint.
     */
    public function getEmail(): ?string
    {
        return $this->email;
    }

    /**
     * Sets Email.
     *
     * The Shopper's email address that is used as a unique ID for the account. This email can be used to
     * detect an account using the `/v1/account/exists` endpoint.
     *
     * @maps email
     */
    public function setEmail(?string $email): void
    {
        $this->email = $email;
    }

    /**
     * Returns Phone.
     *
     * The Shopper's email address that is used to help identify the account owner. This can be passed with
     * the `UserIdentifier.email` to find and match accounts.
     */
    public function getPhone(): ?string
    {
        return $this->phone;
    }

    /**
     * Sets Phone.
     *
     * The Shopper's email address that is used to help identify the account owner. This can be passed with
     * the `UserIdentifier.email` to find and match accounts.
     *
     * @maps phone
     */
    public function setPhone(?string $phone): void
    {
        $this->phone = $phone;
    }

    /**
     * Returns Email Id.
     *
     * The ID associated with the identifying email address for this account.
     */
    public function getEmailId(): ?string
    {
        return $this->emailId;
    }

    /**
     * Sets Email Id.
     *
     * The ID associated with the identifying email address for this account.
     *
     * @maps email_id
     */
    public function setEmailId(?string $emailId): void
    {
        $this->emailId = $emailId;
    }

    /**
     * Returns Phone Id.
     *
     * The ID associated with the identifying phone number for this account.
     */
    public function getPhoneId(): ?string
    {
        return $this->phoneId;
    }

    /**
     * Sets Phone Id.
     *
     * The ID associated with the identifying phone number for this account.
     *
     * @maps phone_id
     */
    public function setPhoneId(?string $phoneId): void
    {
        $this->phoneId = $phoneId;
    }

    /**
     * Returns Artifact.
     *
     * This field can be ignored.
     */
    public function getArtifact(): ?string
    {
        return $this->artifact;
    }

    /**
     * Sets Artifact.
     *
     * This field can be ignored.
     *
     * @maps artifact
     */
    public function setArtifact(?string $artifact): void
    {
        $this->artifact = $artifact;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->email)) {
            $json['email']    = $this->email;
        }
        if (isset($this->phone)) {
            $json['phone']    = $this->phone;
        }
        if (isset($this->emailId)) {
            $json['email_id'] = $this->emailId;
        }
        if (isset($this->phoneId)) {
            $json['phone_id'] = $this->phoneId;
        }
        if (isset($this->artifact)) {
            $json['artifact'] = $this->artifact;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
