<?php

declare(strict_types=1);

/*
 * BoltAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace BoltAPILib\Models;

use stdClass;

class EmbeddedCreditCardInput implements \JsonSerializable
{
    /**
     * @var string
     */
    private $token;

    /**
     * @var string
     */
    private $last4;

    /**
     * @var string
     */
    private $bin;

    /**
     * @var string
     */
    private $number;

    /**
     * @var string
     */
    private $expiration;

    /**
     * @var string
     */
    private $postalCode;

    /**
     * @var array
     */
    private $billingAddressId = [];

    /**
     * @var Address|null
     */
    private $billingAddress;

    /**
     * @var bool|null
     */
    private $save;

    /**
     * @var string|null
     */
    private $tokenType;

    /**
     * @var string|null
     */
    private $network;

    /**
     * @var string|null
     */
    private $cryptogram;

    /**
     * @var string|null
     */
    private $eci;

    /**
     * @var string|null
     */
    private $type;

    /**
     * @param string $token
     * @param string $last4
     * @param string $bin
     * @param string $number
     * @param string $expiration
     * @param string $postalCode
     */
    public function __construct(
        string $token,
        string $last4,
        string $bin,
        string $number,
        string $expiration,
        string $postalCode
    ) {
        $this->token = $token;
        $this->last4 = $last4;
        $this->bin = $bin;
        $this->number = $number;
        $this->expiration = $expiration;
        $this->postalCode = $postalCode;
    }

    /**
     * Returns Token.
     *
     * The Bolt token associated to the credit card.
     */
    public function getToken(): string
    {
        return $this->token;
    }

    /**
     * Sets Token.
     *
     * The Bolt token associated to the credit card.
     *
     * @required
     * @maps token
     */
    public function setToken(string $token): void
    {
        $this->token = $token;
    }

    /**
     * Returns Last 4.
     *
     * The last 4 digits of the credit card number.
     */
    public function getLast4(): string
    {
        return $this->last4;
    }

    /**
     * Sets Last 4.
     *
     * The last 4 digits of the credit card number.
     *
     * @required
     * @maps last4
     */
    public function setLast4(string $last4): void
    {
        $this->last4 = $last4;
    }

    /**
     * Returns Bin.
     *
     * The Bank Identification Number for the credit card; this is typically the first 4-6 digits of the
     * credit card number.
     */
    public function getBin(): string
    {
        return $this->bin;
    }

    /**
     * Sets Bin.
     *
     * The Bank Identification Number for the credit card; this is typically the first 4-6 digits of the
     * credit card number.
     *
     * @required
     * @maps bin
     */
    public function setBin(string $bin): void
    {
        $this->bin = $bin;
    }

    /**
     * Returns Number.
     *
     * Used to provide ApplePay DPAN or private label credit card PAN when applicable.
     */
    public function getNumber(): string
    {
        return $this->number;
    }

    /**
     * Sets Number.
     *
     * Used to provide ApplePay DPAN or private label credit card PAN when applicable.
     *
     * @required
     * @maps number
     */
    public function setNumber(string $number): void
    {
        $this->number = $number;
    }

    /**
     * Returns Expiration.
     *
     * The expiration date of the credit card.
     */
    public function getExpiration(): string
    {
        return $this->expiration;
    }

    /**
     * Sets Expiration.
     *
     * The expiration date of the credit card.
     *
     * @required
     * @maps expiration
     */
    public function setExpiration(string $expiration): void
    {
        $this->expiration = $expiration;
    }

    /**
     * Returns Postal Code.
     *
     * Used for the postal or zip code associated with the credit card.
     */
    public function getPostalCode(): string
    {
        return $this->postalCode;
    }

    /**
     * Sets Postal Code.
     *
     * Used for the postal or zip code associated with the credit card.
     *
     * @required
     * @maps postal_code
     */
    public function setPostalCode(string $postalCode): void
    {
        $this->postalCode = $postalCode;
    }

    /**
     * Returns Billing Address Id.
     *
     * The unique Bolt ID associated with the billing address.
     */
    public function getBillingAddressId(): ?string
    {
        if (count($this->billingAddressId) == 0) {
            return null;
        }
        return $this->billingAddressId['value'];
    }

    /**
     * Sets Billing Address Id.
     *
     * The unique Bolt ID associated with the billing address.
     *
     * @maps billing_address_id
     */
    public function setBillingAddressId(?string $billingAddressId): void
    {
        $this->billingAddressId['value'] = $billingAddressId;
    }

    /**
     * Unsets Billing Address Id.
     *
     * The unique Bolt ID associated with the billing address.
     */
    public function unsetBillingAddressId(): void
    {
        $this->billingAddressId = [];
    }

    /**
     * Returns Billing Address.
     *
     * The Address object is used for billing, shipping, and physical store address use cases.
     */
    public function getBillingAddress(): ?Address
    {
        return $this->billingAddress;
    }

    /**
     * Sets Billing Address.
     *
     * The Address object is used for billing, shipping, and physical store address use cases.
     *
     * @maps billing_address
     */
    public function setBillingAddress(?Address $billingAddress): void
    {
        $this->billingAddress = $billingAddress;
    }

    /**
     * Returns Save.
     *
     * Used to determine whether the address is used once or saved to the shopper's account address book;
     * defaults to `true` if not provided.
     */
    public function getSave(): ?bool
    {
        return $this->save;
    }

    /**
     * Sets Save.
     *
     * Used to determine whether the address is used once or saved to the shopper's account address book;
     * defaults to `true` if not provided.
     *
     * @maps save
     */
    public function setSave(?bool $save): void
    {
        $this->save = $save;
    }

    /**
     * Returns Token Type.
     *
     * Used to define which payment processor generated the token for this credit card.
     */
    public function getTokenType(): ?string
    {
        return $this->tokenType;
    }

    /**
     * Sets Token Type.
     *
     * Used to define which payment processor generated the token for this credit card.
     *
     * @maps token_type
     */
    public function setTokenType(?string $tokenType): void
    {
        $this->tokenType = $tokenType;
    }

    /**
     * Returns Network.
     */
    public function getNetwork(): ?string
    {
        return $this->network;
    }

    /**
     * Sets Network.
     *
     * @maps network
     */
    public function setNetwork(?string $network): void
    {
        $this->network = $network;
    }

    /**
     * Returns Cryptogram.
     */
    public function getCryptogram(): ?string
    {
        return $this->cryptogram;
    }

    /**
     * Sets Cryptogram.
     *
     * @maps cryptogram
     */
    public function setCryptogram(?string $cryptogram): void
    {
        $this->cryptogram = $cryptogram;
    }

    /**
     * Returns Eci.
     */
    public function getEci(): ?string
    {
        return $this->eci;
    }

    /**
     * Sets Eci.
     *
     * @maps eci
     */
    public function setEci(?string $eci): void
    {
        $this->eci = $eci;
    }

    /**
     * Returns Type.
     *
     * Currently only `card` is supported; blank `type` properties default to `card` value.
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     *
     * Currently only `card` is supported; blank `type` properties default to `card` value.
     *
     * @maps type
     */
    public function setType(?string $type): void
    {
        $this->type = $type;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['token']                  = $this->token;
        $json['last4']                  = $this->last4;
        $json['bin']                    = $this->bin;
        $json['number']                 = $this->number;
        $json['expiration']             = $this->expiration;
        $json['postal_code']            = $this->postalCode;
        if (!empty($this->billingAddressId)) {
            $json['billing_address_id'] = $this->billingAddressId['value'];
        }
        if (isset($this->billingAddress)) {
            $json['billing_address']    = $this->billingAddress;
        }
        if (isset($this->save)) {
            $json['save']               = $this->save;
        }
        if (isset($this->tokenType)) {
            $json['token_type']         = $this->tokenType;
        }
        if (isset($this->network)) {
            $json['network']            = $this->network;
        }
        if (isset($this->cryptogram)) {
            $json['cryptogram']         = $this->cryptogram;
        }
        if (isset($this->eci)) {
            $json['eci']                = $this->eci;
        }
        if (isset($this->type)) {
            $json['type']               = $this->type;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
