<?php

declare(strict_types=1);

/*
 * BoltAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace BoltAPILib\Models;

use stdClass;

/**
 * This request is used for authorizing a new, unsaved card.
 */
class MerchantCreditCardAuthorization implements \JsonSerializable
{
    /**
     * @var bool|null
     */
    private $autoCapture;

    /**
     * @var CartCreate
     */
    private $cart;

    /**
     * @var string|null
     */
    private $consumerId;

    /**
     * @var CreditCard
     */
    private $creditCard;

    /**
     * @var string
     */
    private $divisionId;

    /**
     * @var array
     */
    private $previousTransactionId = [];

    /**
     * @var string|null
     */
    private $processingInitiator;

    /**
     * @var Address|null
     */
    private $shippingAddress;

    /**
     * @var string
     */
    private $source;

    /**
     * @var UserIdentifier
     */
    private $userIdentifier;

    /**
     * @var UserIdentity
     */
    private $userIdentity;

    /**
     * @var bool
     */
    private $createBoltAccount;

    /**
     * @param CartCreate $cart
     * @param CreditCard $creditCard
     * @param string $divisionId
     * @param string $source
     * @param UserIdentifier $userIdentifier
     * @param UserIdentity $userIdentity
     * @param bool $createBoltAccount
     */
    public function __construct(
        CartCreate $cart,
        CreditCard $creditCard,
        string $divisionId,
        string $source,
        UserIdentifier $userIdentifier,
        UserIdentity $userIdentity,
        bool $createBoltAccount
    ) {
        $this->cart = $cart;
        $this->creditCard = $creditCard;
        $this->divisionId = $divisionId;
        $this->source = $source;
        $this->userIdentifier = $userIdentifier;
        $this->userIdentity = $userIdentity;
        $this->createBoltAccount = $createBoltAccount;
    }

    /**
     * Returns Auto Capture.
     */
    public function getAutoCapture(): ?bool
    {
        return $this->autoCapture;
    }

    /**
     * Sets Auto Capture.
     *
     * @maps auto_capture
     */
    public function setAutoCapture(?bool $autoCapture): void
    {
        $this->autoCapture = $autoCapture;
    }

    /**
     * Returns Cart.
     */
    public function getCart(): CartCreate
    {
        return $this->cart;
    }

    /**
     * Sets Cart.
     *
     * @required
     * @maps cart
     */
    public function setCart(CartCreate $cart): void
    {
        $this->cart = $cart;
    }

    /**
     * Returns Consumer Id.
     *
     * The unique ID associated with the shopper. Leave `null` for guest checkout payment authorizations.
     */
    public function getConsumerId(): ?string
    {
        return $this->consumerId;
    }

    /**
     * Sets Consumer Id.
     *
     * The unique ID associated with the shopper. Leave `null` for guest checkout payment authorizations.
     *
     * @maps consumer_id
     */
    public function setConsumerId(?string $consumerId): void
    {
        $this->consumerId = $consumerId;
    }

    /**
     * Returns Credit Card.
     *
     * The CreditCard object is used to to pay for guest-checkout transactions and save payment method
     * details to an account. Once saved, you can reference the associated `credit_card_id` for future
     * transactions.
     */
    public function getCreditCard(): CreditCard
    {
        return $this->creditCard;
    }

    /**
     * Sets Credit Card.
     *
     * The CreditCard object is used to to pay for guest-checkout transactions and save payment method
     * details to an account. Once saved, you can reference the associated `credit_card_id` for future
     * transactions.
     *
     * @required
     * @maps credit_card
     */
    public function setCreditCard(CreditCard $creditCard): void
    {
        $this->creditCard = $creditCard;
    }

    /**
     * Returns Division Id.
     *
     * The unique ID associated to the merchant's Bolt Account division; Merchants can have different
     * divisions to suit multiple use cases (storefronts, pay-by-link, phone order processing). You can
     * view and switch between these divisions from the Bolt Merchant Dashboard.
     */
    public function getDivisionId(): string
    {
        return $this->divisionId;
    }

    /**
     * Sets Division Id.
     *
     * The unique ID associated to the merchant's Bolt Account division; Merchants can have different
     * divisions to suit multiple use cases (storefronts, pay-by-link, phone order processing). You can
     * view and switch between these divisions from the Bolt Merchant Dashboard.
     *
     * @required
     * @maps division_id
     */
    public function setDivisionId(string $divisionId): void
    {
        $this->divisionId = $divisionId;
    }

    /**
     * Returns Previous Transaction Id.
     *
     * The unique ID associated with to the shopper's previous subscription-based transaction. Leave `null`
     * for standard, non-subscription transactions.
     */
    public function getPreviousTransactionId(): ?string
    {
        if (count($this->previousTransactionId) == 0) {
            return null;
        }
        return $this->previousTransactionId['value'];
    }

    /**
     * Sets Previous Transaction Id.
     *
     * The unique ID associated with to the shopper's previous subscription-based transaction. Leave `null`
     * for standard, non-subscription transactions.
     *
     * @maps previous_transaction_id
     */
    public function setPreviousTransactionId(?string $previousTransactionId): void
    {
        $this->previousTransactionId['value'] = $previousTransactionId;
    }

    /**
     * Unsets Previous Transaction Id.
     *
     * The unique ID associated with to the shopper's previous subscription-based transaction. Leave `null`
     * for standard, non-subscription transactions.
     */
    public function unsetPreviousTransactionId(): void
    {
        $this->previousTransactionId = [];
    }

    /**
     * Returns Processing Initiator.
     *
     * Determines who initiated the transaction (e.g. shopper, merchant) and how they did it (e.g.
     * recurring subscription, on-file card).
     */
    public function getProcessingInitiator(): ?string
    {
        return $this->processingInitiator;
    }

    /**
     * Sets Processing Initiator.
     *
     * Determines who initiated the transaction (e.g. shopper, merchant) and how they did it (e.g.
     * recurring subscription, on-file card).
     *
     * @maps processing_initiator
     */
    public function setProcessingInitiator(?string $processingInitiator): void
    {
        $this->processingInitiator = $processingInitiator;
    }

    /**
     * Returns Shipping Address.
     *
     * The Address object is used for billing, shipping, and physical store address use cases.
     */
    public function getShippingAddress(): ?Address
    {
        return $this->shippingAddress;
    }

    /**
     * Sets Shipping Address.
     *
     * The Address object is used for billing, shipping, and physical store address use cases.
     *
     * @maps shipping_address
     */
    public function setShippingAddress(?Address $shippingAddress): void
    {
        $this->shippingAddress = $shippingAddress;
    }

    /**
     * Returns Source.
     */
    public function getSource(): string
    {
        return $this->source;
    }

    /**
     * Sets Source.
     *
     * @required
     * @maps source
     */
    public function setSource(string $source): void
    {
        $this->source = $source;
    }

    /**
     * Returns User Identifier.
     *
     * The object containing key lookup IDs associated with the shopper's account, such as the unqiue email
     * address and phone number.
     */
    public function getUserIdentifier(): UserIdentifier
    {
        return $this->userIdentifier;
    }

    /**
     * Sets User Identifier.
     *
     * The object containing key lookup IDs associated with the shopper's account, such as the unqiue email
     * address and phone number.
     *
     * @required
     * @maps user_identifier
     */
    public function setUserIdentifier(UserIdentifier $userIdentifier): void
    {
        $this->userIdentifier = $userIdentifier;
    }

    /**
     * Returns User Identity.
     *
     * The object containing the account owner's first and last name.
     */
    public function getUserIdentity(): UserIdentity
    {
        return $this->userIdentity;
    }

    /**
     * Sets User Identity.
     *
     * The object containing the account owner's first and last name.
     *
     * @required
     * @maps user_identity
     */
    public function setUserIdentity(UserIdentity $userIdentity): void
    {
        $this->userIdentity = $userIdentity;
    }

    /**
     * Returns Create Bolt Account.
     *
     * If `true`, the guest shopper is provided a Bolt Account using their email address as its unique ID;
     * if `false`, no information is saved at checkout.
     */
    public function getCreateBoltAccount(): bool
    {
        return $this->createBoltAccount;
    }

    /**
     * Sets Create Bolt Account.
     *
     * If `true`, the guest shopper is provided a Bolt Account using their email address as its unique ID;
     * if `false`, no information is saved at checkout.
     *
     * @required
     * @maps create_bolt_account
     */
    public function setCreateBoltAccount(bool $createBoltAccount): void
    {
        $this->createBoltAccount = $createBoltAccount;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->autoCapture)) {
            $json['auto_capture']            = $this->autoCapture;
        }
        $json['cart']                        = $this->cart;
        if (isset($this->consumerId)) {
            $json['consumer_id']             = $this->consumerId;
        }
        $json['credit_card']                 = $this->creditCard;
        $json['division_id']                 = $this->divisionId;
        if (!empty($this->previousTransactionId)) {
            $json['previous_transaction_id'] = $this->previousTransactionId['value'];
        }
        if (isset($this->processingInitiator)) {
            $json['processing_initiator']    = $this->processingInitiator;
        }
        if (isset($this->shippingAddress)) {
            $json['shipping_address']        = $this->shippingAddress;
        }
        $json['source']                      = $this->source;
        $json['user_identifier']             = $this->userIdentifier;
        $json['user_identity']               = $this->userIdentity;
        $json['create_bolt_account']         = $this->createBoltAccount;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
