<?php

declare(strict_types=1);

/*
 * BoltAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace BoltAPILib\Models;

use stdClass;

class HostedPaymentsResponse implements \JsonSerializable
{
    /**
     * @var string
     */
    private $xAccountId;

    /**
     * @var string
     */
    private $xAmount;

    /**
     * @var string
     */
    private $xCurrency;

    /**
     * @var string
     */
    private $xGatewayReference;

    /**
     * @var string|null
     */
    private $xMessage;

    /**
     * @var string
     */
    private $xReference;

    /**
     * @var string
     */
    private $xResult;

    /**
     * @var string
     */
    private $xSignature;

    /**
     * @var string
     */
    private $xTest;

    /**
     * @var string
     */
    private $xTimestamp;

    /**
     * @param string $xAccountId
     * @param string $xAmount
     * @param string $xCurrency
     * @param string $xGatewayReference
     * @param string $xReference
     * @param string $xResult
     * @param string $xSignature
     * @param string $xTest
     * @param string $xTimestamp
     */
    public function __construct(
        string $xAccountId,
        string $xAmount,
        string $xCurrency,
        string $xGatewayReference,
        string $xReference,
        string $xResult,
        string $xSignature,
        string $xTest,
        string $xTimestamp
    ) {
        $this->xAccountId = $xAccountId;
        $this->xAmount = $xAmount;
        $this->xCurrency = $xCurrency;
        $this->xGatewayReference = $xGatewayReference;
        $this->xReference = $xReference;
        $this->xResult = $xResult;
        $this->xSignature = $xSignature;
        $this->xTest = $xTest;
        $this->xTimestamp = $xTimestamp;
    }

    /**
     * Returns X Account Id.
     */
    public function getXAccountId(): string
    {
        return $this->xAccountId;
    }

    /**
     * Sets X Account Id.
     *
     * @required
     * @maps x_account_id
     */
    public function setXAccountId(string $xAccountId): void
    {
        $this->xAccountId = $xAccountId;
    }

    /**
     * Returns X Amount.
     */
    public function getXAmount(): string
    {
        return $this->xAmount;
    }

    /**
     * Sets X Amount.
     *
     * @required
     * @maps x_amount
     */
    public function setXAmount(string $xAmount): void
    {
        $this->xAmount = $xAmount;
    }

    /**
     * Returns X Currency.
     */
    public function getXCurrency(): string
    {
        return $this->xCurrency;
    }

    /**
     * Sets X Currency.
     *
     * @required
     * @maps x_currency
     */
    public function setXCurrency(string $xCurrency): void
    {
        $this->xCurrency = $xCurrency;
    }

    /**
     * Returns X Gateway Reference.
     */
    public function getXGatewayReference(): string
    {
        return $this->xGatewayReference;
    }

    /**
     * Sets X Gateway Reference.
     *
     * @required
     * @maps x_gateway_reference
     */
    public function setXGatewayReference(string $xGatewayReference): void
    {
        $this->xGatewayReference = $xGatewayReference;
    }

    /**
     * Returns X Message.
     */
    public function getXMessage(): ?string
    {
        return $this->xMessage;
    }

    /**
     * Sets X Message.
     *
     * @maps x_message
     */
    public function setXMessage(?string $xMessage): void
    {
        $this->xMessage = $xMessage;
    }

    /**
     * Returns X Reference.
     */
    public function getXReference(): string
    {
        return $this->xReference;
    }

    /**
     * Sets X Reference.
     *
     * @required
     * @maps x_reference
     */
    public function setXReference(string $xReference): void
    {
        $this->xReference = $xReference;
    }

    /**
     * Returns X Result.
     */
    public function getXResult(): string
    {
        return $this->xResult;
    }

    /**
     * Sets X Result.
     *
     * @required
     * @maps x_result
     */
    public function setXResult(string $xResult): void
    {
        $this->xResult = $xResult;
    }

    /**
     * Returns X Signature.
     */
    public function getXSignature(): string
    {
        return $this->xSignature;
    }

    /**
     * Sets X Signature.
     *
     * @required
     * @maps x_signature
     */
    public function setXSignature(string $xSignature): void
    {
        $this->xSignature = $xSignature;
    }

    /**
     * Returns X Test.
     */
    public function getXTest(): string
    {
        return $this->xTest;
    }

    /**
     * Sets X Test.
     *
     * @required
     * @maps x_test
     */
    public function setXTest(string $xTest): void
    {
        $this->xTest = $xTest;
    }

    /**
     * Returns X Timestamp.
     */
    public function getXTimestamp(): string
    {
        return $this->xTimestamp;
    }

    /**
     * Sets X Timestamp.
     *
     * @required
     * @maps x_timestamp
     */
    public function setXTimestamp(string $xTimestamp): void
    {
        $this->xTimestamp = $xTimestamp;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['x_account_id']        = $this->xAccountId;
        $json['x_amount']            = $this->xAmount;
        $json['x_currency']          = $this->xCurrency;
        $json['x_gateway_reference'] = $this->xGatewayReference;
        if (isset($this->xMessage)) {
            $json['x_message']       = $this->xMessage;
        }
        $json['x_reference']         = $this->xReference;
        $json['x_result']            = $this->xResult;
        $json['x_signature']         = $this->xSignature;
        $json['x_test']              = $this->xTest;
        $json['x_timestamp']         = $this->xTimestamp;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
