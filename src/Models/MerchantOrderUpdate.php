<?php

declare(strict_types=1);

/*
 * BoltAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace BoltAPILib\Models;

use stdClass;

class MerchantOrderUpdate implements \JsonSerializable
{
    /**
     * @var BaseCart|null
     */
    private $cart;

    /**
     * @var string|null
     */
    private $orderReference;

    /**
     * Returns Cart.
     *
     * The BaseCart object contains the core details typically found in most cart objects, including items,
     * discounts, amount totals, shipments, and in-store pickups.
     */
    public function getCart(): ?BaseCart
    {
        return $this->cart;
    }

    /**
     * Sets Cart.
     *
     * The BaseCart object contains the core details typically found in most cart objects, including items,
     * discounts, amount totals, shipments, and in-store pickups.
     *
     * @maps cart
     */
    public function setCart(?BaseCart $cart): void
    {
        $this->cart = $cart;
    }

    /**
     * Returns Order Reference.
     *
     * The Bolt reference ID for a given order. This ID can be associated with many transaction references.
     */
    public function getOrderReference(): ?string
    {
        return $this->orderReference;
    }

    /**
     * Sets Order Reference.
     *
     * The Bolt reference ID for a given order. This ID can be associated with many transaction references.
     *
     * @maps order_reference
     */
    public function setOrderReference(?string $orderReference): void
    {
        $this->orderReference = $orderReference;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->cart)) {
            $json['cart']            = $this->cart;
        }
        if (isset($this->orderReference)) {
            $json['order_reference'] = $this->orderReference;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
